type ERC3000Registry @entity {
  id: ID!
  address: Bytes!
  count: Int!
  games: [OptimisticGame!]
}

type OptimisticGame @entity {
  id: ID!
  name: String!
  queue: GovernQueue!
  executor: Govern!
}

type Govern @entity {
  id: ID!
  address: Bytes!
  metadata: Bytes
  executions: [Execution!]
  games: [OptimisticGame!] @derivedFrom(field: "executor")
  roles: [Role!]
}

type Execution @entity {
  id: ID!
  executor: Govern!
  queue: GovernQueue!
  failureMap: Bytes!
  actions: [Action!] @derivedFrom(field: "execution")
  results: [Bytes!]
}

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  execution: Execution!
  queueItem: QueueItem!
}

type GovernQueue @entity {
  id: ID!
  address: Bytes!
  config: Config
  queued: [QueueItem!]
  challenges: [Challenge!]
  vetos: [Veto!]
  executions: [Execution!] @derivedFrom(field: "queue")
  games: [OptimisticGame!] @derivedFrom(field: "queue")
  roles: [Role!]
}

type Config @entity {
  id: ID!
  queue: GovernQueue!
  executionDelay: BigInt!
  scheduleDeposit: Collateral!
  challengeDeposit: Collateral!
  vetoDeposit: Collateral!
  resolver: Bytes!
  rules: Bytes!
}

type Collateral @entity {
  id: ID!
  token: ERC20!
  amount: BigInt!
}

type ERC20 @entity {
  id: ID!
  address: Bytes!
}

type QueueItem @entity {
  id: ID!
  status: ItemStatus!
  nonce: BigInt!
  executionTime: BigInt!
  submitter: Bytes!
  executor: Govern!
  proof: Bytes!
  collateral: Collateral!
  actions: [Action!] @derivedFrom(field: "queueItem")
  createdAt: BigInt!
}

type Challenge @entity {
  id: ID!
  queue: GovernQueue!
  challenger: Bytes!
  arbitrator: Bytes!
  disputeId: BigInt!
  evidences: [Evidence!] @derivedFrom(field: "challenge")
  collateral: Collateral!
  ruling: BigInt
  approved: Boolean
  createdAt: BigInt!
}

type Evidence @entity {
  id: ID!
  challenge: Challenge!
  data: Bytes!
  submitter: Bytes!
  createdAt: BigInt!
}

type Veto @entity {
  id: ID!
  queue: GovernQueue!
  reason: Bytes!
  submitter: Bytes!
  collateral: Collateral!
  createdAt: BigInt!
}

type Role @entity {
  id: ID!
  entity: Bytes!
  selector: Bytes!
  who: Bytes!
  granted: Boolean!
  frozen: Boolean!
}

enum ItemStatus {
  None
  Approved
  Cancelled
  Challenged
  Executed
  Rejected
  Scheduled
  Vetoed
}
