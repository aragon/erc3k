type ERC3000Registry @entity {
  id: ID!
  address: Bytes!
  count: Int!
  entries: [RegistryEntry!]!
}

type RegistryEntry @entity {
  id: ID!
  name: String!
  queue: GovernQueue!
  executor: Govern!
}

type Govern @entity {
  id: ID!
  address: Bytes!
  metadata: Bytes
  registryEntries: [RegistryEntry!]! @derivedFrom(field: "executor")
  containers: [Container]!
  roles: [Role!]!
}

type GovernQueue @entity {
  id: ID!
  address: Bytes!
  config: Config!
  registryEntries: [RegistryEntry!]! @derivedFrom(field: "queue")
  queued: [Container!]!
  roles: [Role!]!
}

type Config @entity {
  id: ID!
  queue: GovernQueue!
  executionDelay: BigInt!
  scheduleDeposit: Collateral!
  challengeDeposit: Collateral!
  vetoDeposit: Collateral!
  resolver: Bytes!
  rules: Bytes!
}

type Container @entity {
  id: ID!
  queue: GovernQueue! @derivedFrom(field: "queued")
  state: ContainerState!
  config: Config!
  payload: ContainerPayload!
  history: [ContainerEvent]!
}

type ContainerPayload @entity {
  id: ID!
  container: Container! @derivedFrom(field: "payload")
  nonce: BigInt!
  executionTime: BigInt!
  submitter: Bytes!
  executor: Govern!
  actions: [Action!]! @derivedFrom(field: "payload")
  allowFailuresMap: Bytes!
  proof: Bytes!
}

type Collateral @entity {
  id: ID!
  token: Bytes!
  amount: BigInt!
}

type Action @entity {
  id: ID!
  payload: ContainerPayload!
  to: Bytes!
  value: BigInt!
  data: Bytes!
}

type Role @entity {
  id: ID!
  entity: Bytes!
  selector: Bytes!
  who: Bytes!
  granted: Boolean!
  frozen: Boolean!
}

enum ContainerState {
  None
  Scheduled
  Approved
  Challenged
  Rejected
  Cancelled
  Executed
}

# Container events

interface ContainerEvent {
  id: ID!
  createdAt: BigInt!
}

type ContainerEventChallenge implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  actor: Bytes!
  reason: Bytes!
  resolverId: BigInt!
  collateral: Collateral!
}

type ContainerEventExecute implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  execResults: [Bytes!]!
}

type ContainerEventResolve implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  approved: Boolean!
}

type ContainerEventRule implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  ruling: BigInt!
}

type ContainerEventSchedule implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  collateral: Collateral!
}

type ContainerEventSubmitEvidence implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  evidence: Bytes!
  submitter: Bytes!
  finished: Boolean!
}

type ContainerEventVeto implements ContainerEvent @entity {
  id: ID!
  createdAt: BigInt!
  reason: Bytes!
}
