type ERC3000Registry @entity {
  id: ID!
  address: Bytes!
  count: Int!
  entries: [RegistryEntry!]
}

type RegistryEntry @entity {
  id: ID!
  name: String!
  queue: GovernQueue!
  executor: Govern!
}

type Govern @entity {
  id: ID!
  address: Bytes!
  metadata: Bytes
  correspondingEntries: [RegistryEntry!] @derivedFrom(field: "executor")
  containers: [Container]!
  roles: [Role!]
}

type GovernQueue @entity {
  id: ID!
  address: Bytes!
  config: Config!
  correspondingEntries: [RegistryEntry!] @derivedFrom(field: "queue")
  queued: [Container!]
  challenged: [Challenge]!
  roles: [Role!]
}

type Config @entity {
  id: ID!
  queue: GovernQueue!
  executionDelay: BigInt!
  scheduleDeposit: Collateral!
  challengeDeposit: Collateral!
  vetoDeposit: Collateral!
  resolver: Bytes!
  rules: Bytes!
}

type Container @entity {
  id: ID!
  queue: GovernQueue!
  state: ContainerState!
  config: Config!
  payload: ContainerPayload!
  history: [ContainerEvent]!
}

type ContainerPayload @entity {
  id: ID!
  container: Container! @derivedFrom(field: "payload")
  nonce: BigInt!
  executionTime: BigInt!
  submitter: Bytes!
  executor: Govern!
  actions: [Action!] @derivedFrom(field: "payload")
  allowFailuresMap: Bytes!
  proof: Bytes!
}

type ContainerEvent @entity {
  id: ID!
  type: ContainerEventType
  createdAt: BigInt
  data: [String]!
}

type Collateral @entity {
  id: ID!
  token: Bytes!
  amount: BigInt!
}

type Action @entity {
  id: ID!
  payload: ContainerPayload!
  to: Bytes!
  value: BigInt!
  data: Bytes!
}

# I honestly think this should not be here,
# but we can handle this later.
type Challenge @entity {
  id: ID!
  container: Container!
  challenger: Bytes!
  arbitrator: Bytes!
  disputeId: BigInt!
  evidences: [Evidence!] @derivedFrom(field: "challenge")
  collateral: Collateral!
  ruling: BigInt
  approved: Boolean
  createdAt: BigInt!
}

type Evidence @entity {
  id: ID!
  challenge: Challenge!
  data: Bytes!
  submitter: Bytes!
  createdAt: BigInt!
}

type Role @entity {
  id: ID!
  entity: Bytes!
  selector: Bytes!
  who: Bytes!
  granted: Boolean!
  frozen: Boolean!
}


enum ContainerEventType {
  Schedule,
  Challenge,
  Approve,
  Reject,
  Cancel,
  Execute,
  Veto,
  Rule,
  EvidenceSubmission
}

enum ContainerState {
  None
  Scheduled
  Approved
  Challenged
  Rejected
  Cancelled
  Executed
}

