{
  "address": "0x544ADee3ee41aEa40bED5c6E0a5575A20169362e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aclRoot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "scheduleDeposit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "challengeDeposit",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rules",
              "type": "bytes"
            }
          ],
          "internalType": "struct ERC3000Data.Config",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "newQueue",
      "outputs": [
        {
          "internalType": "contract GovernQueue",
          "name": "queue",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "7473327",
    "logsBloom": "0x
    "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99",
    "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0xc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091",
          "0x586df60400000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000544adee3ee41aea40bed5c6e0a5575a20169362e",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 0,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0xd99e39303be7c43f3cd7f2d4f6aa487d2867be2d071eed6a8d4a888742b0fa85"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0x0a61dcdfcdfc6da74a563de8455cc4ae6d6c9d0b442eb2f7309e6b31e4680d79",
          "0x36759cefd711e264a2d8b72f1b2ed7ee17753f8249208b22c383ac3f86a83f18",
          "0x000000000000000000000000544adee3ee41aea40bed5c6e0a5575a20169362e"
        ],
        "data": "0xe00000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0xbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca"
        ],
        "data": "0x88f3ee6900000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0xbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca"
        ],
        "data": "0x45f1d4aa00000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x91b7a237ce126f5a7c748cec7e859e058204691cd581b57974df48132e40101f",
        "address": "0x3b806A6E3740354769B1D708D6e332E506e08956",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0xbac5ecd2faa027574e2101f9b6bdc19dec3f76beff12aa506ac3391be0022e46"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xf2b6bf7fc71497fa786d6e8dca30be02e96e14d0ef9a0c71f25e1bfd8b722b99"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "7473327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ab40b143b50742d171e87e19303a80b3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aclRoot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"newQueue\",\"outputs\":[{\"internalType\":\"contract GovernQueue\",\"name\":\"queue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/core-factories/GovernQueueFactory.sol\":\"GovernQueueFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../initializable/Initializable.sol\\\";\\n\\nimport \\\"./IACLOracle.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes4 role;\\n        address who;\\n    }\\n}\\n\\ncontract ACL is Initializable {\\n    bytes4 public constant ROOT_ROLE =\\n        this.grant.selector\\n        ^ this.revoke.selector\\n        ^ this.freeze.selector\\n        ^ this.bulk.selector\\n    ;\\n\\n    address internal constant FREEZE_FLAG = address(1);\\n    address internal constant ANY_ADDR = address(-1);\\n\\n    address internal constant UNSET_ROLE = address(0);\\n    address internal constant ALLOW_FLAG = address(2);\\n    \\n    mapping (bytes4 => mapping (address => address)) public roles;\\n\\n    event Granted(bytes4 indexed role, address indexed actor, address indexed who, IACLOracle oracle);\\n    event Revoked(bytes4 indexed role, address indexed actor, address indexed who);\\n    event Frozen(bytes4 indexed role, address indexed actor);\\n\\n    modifier auth(bytes4 _role) {\\n        require(willPerform(_role, msg.sender, msg.data), \\\"acl: auth\\\");\\n        _;\\n    }\\n\\n    modifier initACL(address _initialRoot) {\\n        // ACL might have been already initialized by constructors\\n        if (initBlocks[\\\"acl\\\"] == 0) {\\n            _initializeACL(_initialRoot);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _initialRoot) public initACL(_initialRoot) { }\\n\\n    function _initializeACL(address _initialRoot) internal onlyInit(\\\"acl\\\") {\\n        _grant(ROOT_ROLE, _initialRoot);\\n    }\\n\\n    function grant(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _grant(_role, _who);\\n    }\\n\\n    function grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) external auth(ROOT_ROLE) {\\n        _grantWithOracle(_role, _who, _oracle);\\n    }\\n\\n    function revoke(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _revoke(_role, _who);\\n    }\\n\\n    function freeze(bytes4 _role) external auth(ROOT_ROLE) {\\n        _freeze(_role);\\n    }\\n\\n    function bulk(ACLData.BulkItem[] memory items) public auth(ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(item.role);\\n        }\\n    }\\n\\n    function willPerform(bytes4 _role, address _sender, bytes memory _data) public returns (bool) {\\n        address senderRole = roles[_role][msg.sender];\\n        if (senderRole != UNSET_ROLE) {\\n            if (senderRole == ALLOW_FLAG) return true;\\n            if (IACLOracle(senderRole).willPerform(_role, _sender, _data)) return true;\\n        }\\n\\n        address anyRole = roles[_role][ANY_ADDR];\\n        if (anyRole != UNSET_ROLE) {\\n            if (anyRole == ALLOW_FLAG) return true;\\n            if (IACLOracle(anyRole).willPerform(_role, _sender, _data)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _grant(bytes4 _role, address _who) internal {\\n        _grantWithOracle(_role, _who, IACLOracle(ALLOW_FLAG));\\n    }\\n\\n    function _grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n        require(_who != FREEZE_FLAG, \\\"acl: bad freeze\\\");\\n        \\n        roles[_role][_who] = address(_oracle);\\n        emit Granted(_role, msg.sender, _who, _oracle);\\n    }\\n\\n    function _revoke(bytes4 _role, address _who) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][_who] = UNSET_ROLE;\\n        emit Revoked(_role, msg.sender, _who);\\n    }\\n\\n    function _freeze(bytes4 _role) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][FREEZE_FLAG] = FREEZE_FLAG;\\n\\n        emit Frozen(_role, msg.sender);\\n    }\\n\\n    function isFrozen(bytes4 _role) public view returns (bool) {\\n        return roles[_role][FREEZE_FLAG] == FREEZE_FLAG;\\n    }\\n}\",\"keccak256\":\"0xfc3130638c04860e1006ccc2a765c36f22a3eadb2f095098f49d37ed26c073cc\",\"license\":\"GPL-3.0\"},\"@aragon/govern-contract-utils/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.6.8;\\n\\ninterface IACLOracle {\\n    function willPerform(bytes4 role, address who, bytes calldata data) external returns (bool allowed);\\n}\",\"keccak256\":\"0x978bedb926117b472212ea90debf71b4274bf1e1e673f541247cc01c93b55062\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../erc165/ERC165.sol\\\";\\n\\ncontract AdaptativeERC165 is ERC165 {\\n    // erc165 interface ID -> whether it is supported\\n    mapping (bytes4 => bool) internal standardSupported;\\n    // callback function signature -> magic number to return\\n    mapping (bytes4 => bytes32) internal callbackMagicNumbers;\\n\\n    bytes32 internal constant UNREGISTERED_CALLBACK = bytes32(0);\\n\\n    event RegisteredStandard(bytes4 interfaceId);\\n    event RegisteredCallback(bytes4 sig, bytes4 magicNumber);\\n    event ReceivedCallback(bytes4 indexed sig, bytes data);\\n\\n    function supportsInterface(bytes4 _interfaceId) override virtual public view returns (bool) {\\n        return standardSupported[_interfaceId] || super.supportsInterface(_interfaceId);\\n    }\\n\\n    function _handleCallback(bytes4 _sig, bytes memory _data) internal {\\n        bytes32 magicNumber = callbackMagicNumbers[_sig];\\n        require(magicNumber != UNREGISTERED_CALLBACK, \\\"adap-erc165: unknown callback\\\");\\n\\n        emit ReceivedCallback(_sig, _data);\\n\\n        // low-level return magic number\\n        assembly {\\n            mstore(0x00, magicNumber)\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    function _registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        _registerStandard(_interfaceId);\\n        _registerCallback(_callbackSig, _magicNumber);\\n    }\\n\\n    function _registerStandard(bytes4 _interfaceId) internal {\\n        // use a random magic number for standards without number\\n        standardSupported[_interfaceId] = true;\\n\\n        emit RegisteredStandard(_interfaceId);\\n    }\\n\\n    function _registerCallback(bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        callbackMagicNumbers[_callbackSig] = _magicNumber;\\n\\n        emit RegisteredCallback(_callbackSig, _magicNumber);\\n    }\\n}\",\"keccak256\":\"0x38499e059897298638ffbcdd3d191c4f345e0a2537fd70d3cd17d47758b4cca2\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/address-utils/AddressUtils.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nlibrary AddressUtils {\\n    function toPayable(address addr) internal pure returns (address payable) {\\n        return address(bytes20(addr));\\n    }\\n\\n    function toAddress(address addr) internal pure returns (address payable) {\\n        return address(bytes20(addr));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool result) {\\n        assembly {\\n            result := not(iszero(extcodesize(addr)))\\n        }\\n    }\\n}\",\"keccak256\":\"0x64afde65cee1947a6b5a53730e0c42c71d6042e461b0f39d5713c7f6771757f2\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"erc3k/contracts/ERC3000Data.sol\\\";\\n\\nimport \\\"../erc20/SafeERC20.sol\\\";\\n\\nlibrary DepositLib {\\n    using SafeERC20 for ERC20;\\n\\n    event Lock(address indexed token, address indexed from, uint256 amount);\\n    event Unlock(address indexed token, address indexed to, uint256 amount);\\n\\n    function collectFrom(ERC3000Data.Collateral memory _collateral, address _from) internal {\\n        if (_collateral.amount > 0) {\\n            ERC20 token = ERC20(_collateral.token);\\n            require(token.safeTransferFrom(_from, address(this), _collateral.amount), \\\"queue: bad get token\\\");\\n\\n            emit Lock(_collateral.token, _from, _collateral.amount);\\n        }\\n    }\\n\\n    function releaseTo(ERC3000Data.Collateral memory _collateral, address _to) internal {\\n        if (_collateral.amount > 0) {\\n            ERC20 token = ERC20(_collateral.token);\\n            require(token.safeTransfer(_to, _collateral.amount), \\\"queue: bad send token\\\");\\n\\n            emit Unlock(_collateral.token, _to, _collateral.amount);\\n        }\\n    }\\n}\",\"keccak256\":\"0x882fc25e75b2be510e30442e1448559437dd21e250cf7c2ff72161d64f0b0889\",\"license\":\"GPL-3.0\"},\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nabstract contract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) virtual public view returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID\\n          || block.timestamp == 1; // silence visibility warning needed for overrides\\n    }\\n}\",\"keccak256\":\"0x48bc84112e6ba3faee6e57081d97284338bda87af97e1353a957701b8059c80d\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragonOS/blob/next/contracts/common/SafeERC20.sol\\n\\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../address-utils/AddressUtils.sol\\\";\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 {\\n    function totalSupply() virtual public view returns (uint256);\\n\\n    function balanceOf(address _who) virtual public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        virtual public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) virtual public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        virtual public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        virtual public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool ret)\\n    {\\n        if (!_addr.isContract()) {\\n            return false;\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas(),                // forward all \\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize()\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            _token.transfer.selector,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\n    }\\n}\",\"keccak256\":\"0xf5c2b2fceb1f639cb56c6e6e098955a5583d4e240b7a021c0e3afa9de60374f4\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/initializable/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.6.8;\\n\\ncontract Initializable {\\n    mapping (string => uint256) public initBlocks;\\n\\n    event Initialized(string indexed key);\\n\\n    modifier onlyInit(string memory key) {\\n        require(initBlocks[key] == 0, \\\"initializable: already initialized\\\");\\n        initBlocks[key] = block.number;\\n        _;\\n        emit Initialized(key);\\n    }\\n}\",\"keccak256\":\"0xebf2390cfe1c1d57fa3d2dae190a56db50d03fdd6732f8aef233a34581f5760b\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/minimal-proxies/ERC1167ProxyFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// Inspired by: https://github.com/optionality/clone-factory\\n\\npragma solidity ^0.6.8;\\n\\nlibrary ERC1167ProxyFactory {\\n    function clone(address _implementation) internal returns (address cloneAddr) {\\n        bytes memory code = generateCode(_implementation);\\n\\n        assembly {\\n            cloneAddr := create(0, add(code, 0x20), 55)\\n        }\\n        \\n        require(cloneAddr != address(0), \\\"proxy-factory: bad create\\\");\\n    }\\n\\n    function clone(address _implementation, bytes memory _initData) internal returns (address cloneAddr) {\\n        cloneAddr = clone(_implementation);\\n        (bool ok, bytes memory ret) = cloneAddr.call(_initData);\\n\\n        require(ok, _getRevertMsg(ret));\\n    }\\n\\n    function clone2(address _implementation, bytes32 _salt) internal returns (address cloneAddr) {\\n        bytes memory code = generateCode(_implementation);\\n        \\n        assembly {\\n            cloneAddr := create2(0, add(code, 0x20), 55, _salt)\\n        }\\n        \\n        require(cloneAddr != address(0), \\\"proxy-factory: bad create2\\\");\\n    }\\n\\n    function clone2(address _implementation, bytes32 _salt, bytes memory _initData) internal returns (address cloneAddr) {\\n        cloneAddr = clone2(_implementation, _salt);\\n        (bool ok, bytes memory ret) = cloneAddr.call(_initData);\\n\\n        require(ok, _getRevertMsg(ret));\\n    }\\n\\n    function generateCode(address _implementation) internal pure returns (bytes memory code) {\\n        code = new bytes(55);\\n        \\n        assembly {\\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(code, 0x34), shl(0x60, _implementation))\\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n        }\\n    }\\n\\n    // From: https://ethereum.stackexchange.com/a/83577\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return '';\\n\\n        assembly {\\n            _returnData := add(_returnData, 0x04) // Slice the sighash.\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n}\\n\",\"keccak256\":\"0x2c92620c6ebd44fe19cad226d25f53c4c05be0c680249ec1b01832f7715e7dd9\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/protocol/IArbitrable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragon-court/blob/master/contracts/arbitration/IArbitrable.sol\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\nabstract contract IArbitrable {\\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\\n    uint256 internal constant ALLOW_RULING = 4;\\n\\n    /**\\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\\n    * @param arbitrator IArbitrator instance ruling the dispute\\n    * @param disputeId Identification number of the dispute being ruled by the arbitrator\\n    * @param ruling Ruling given by the arbitrator\\n    */\\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\\n\\n    /**\\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\\n    * @param arbitrator IArbitrator submitting the evidence for\\n    * @param disputeId Identification number of the dispute receiving new evidence\\n    * @param submitter Address of the account submitting the evidence\\n    * @param evidence Data submitted for the evidence of the dispute\\n    * @param finished Whether or not the submitter has finished submitting evidence\\n    */\\n    event EvidenceSubmitted(IArbitrator indexed arbitrator, uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\\n\\n    /**\\n    * @dev Submit evidence for a dispute\\n    * @param _disputeId Id of the dispute in the Court\\n    * @param _evidence Data submitted for the evidence related to the dispute\\n    * @param _finished Whether or not the submitter has finished submitting evidence\\n    */\\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) virtual external;\\n\\n    /**\\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\\n    * @param _disputeId Identification number of the dispute to be ruled\\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \\\"refused to make a decision\\\"\\n    */\\n    function rule(uint256 _disputeId, uint256 _ruling) virtual external;\\n}\",\"keccak256\":\"0x90eb43471eae9e12139e544fd5bf35e0a285cb5f2b2920b06f567392d417c96b\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/protocol/IArbitrator.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragon-court/blob/master/contracts/arbitration/IArbitrator.sol\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../erc20/SafeERC20.sol\\\";\\n\\ninterface IArbitrator {\\n    /**\\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\n    * @return Dispute identification number\\n    */\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\\n\\n    /**\\n    * @dev Close the evidence period of a dispute\\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\\n    */\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\\n    * @param _disputeId Identification number of the dispute to be executed\\n    */\\n    function executeRuling(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Tell the dispute fees information to create a dispute\\n    * @return recipient Address where the corresponding dispute fees must be transferred to\\n    * @return feeToken ERC20 token used for the fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n\\n    /**\\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\\n    * @param _subscriber Address of the account paying the subscription fees for\\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\\n    * @return feeToken ERC20 token used for the subscription fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n}\",\"keccak256\":\"0xee70f23c164a044943b02709dd7af3a23187b97a4319a1a08dd2aa531c6573f1\",\"license\":\"MIT\"},\"@aragon/govern-core/contracts/pipelines/GovernQueue.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8; // TODO: reconsider compiler version before production release\\npragma experimental ABIEncoderV2; // required for passing structs in calldata (fairly secure at this point)\\n\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/protocol/IArbitrable.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol\\\";\\n\\nlibrary GovernQueueStateLib {\\n    enum State {\\n        None,\\n        Scheduled,\\n        Challenged,\\n        Approved,\\n        Rejected,\\n        Cancelled,\\n        Executed\\n    }\\n\\n    struct Item {\\n        State state;\\n    }\\n\\n    function checkState(Item storage _item, State _requiredState) internal view {\\n        require(_item.state == _requiredState, \\\"queue: bad state\\\");\\n    }\\n\\n    function setState(Item storage _item, State _state) internal {\\n        _item.state = _state;\\n    }\\n\\n    function checkAndSetState(Item storage _item, State _fromState, State _toState) internal {\\n        checkState(_item, _fromState);\\n        setState(_item, _toState);\\n    }\\n}\\n\\ncontract GovernQueue is IERC3000, AdaptativeERC165, IArbitrable, ACL {\\n    // Syntax sugar to enable method-calling syntax on types\\n    using ERC3000Data for *;\\n    using DepositLib for ERC3000Data.Collateral;\\n    using GovernQueueStateLib for GovernQueueStateLib.Item;\\n    using SafeERC20 for ERC20;\\n\\n    // Permanent state\\n    bytes32 public configHash; // keccak256 hash of the current ERC3000Data.Config\\n    uint256 public nonce; // number of scheduled payloads so far\\n    mapping (bytes32 => GovernQueueStateLib.Item) public queue; // container hash -> execution state\\n\\n    // Temporary state\\n    mapping (bytes32 => address) public challengerCache; // container hash -> challenger addr (used after challenging and before resolution implementation)\\n    mapping (IArbitrator => mapping (uint256 => bytes32)) public disputeItemCache; // arbitrator addr -> dispute id -> container hash (used between dispute creation and ruling)\\n\\n    /**\\n     * @param _aclRoot account that will be given root permissions on ACL (commonly given to factory)\\n     * @param _initialConfig initial configuration parameters\\n     */\\n    constructor(address _aclRoot, ERC3000Data.Config memory _initialConfig)\\n        public\\n        ACL(_aclRoot) // note that this contract directly derives from ACL (ACL is local to contract and not global to system in Govern)\\n    {\\n        initialize(_aclRoot, _initialConfig);\\n    }\\n\\n    function initialize(address _aclRoot, ERC3000Data.Config memory _initialConfig) public initACL(_aclRoot) onlyInit(\\\"queue\\\") {\\n        _setConfig(_initialConfig);\\n        _registerStandard(ARBITRABLE_INTERFACE_ID);\\n        _registerStandard(ERC3000_INTERFACE_ID);\\n    }\\n\\n     /**\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window. Pulls collateral from submitter into contract.\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     */\\n    function schedule(ERC3000Data.Container memory _container) // TO FIX: Container is in memory and function has to be public to avoid an unestrutable solidity crash\\n        public\\n        override\\n        auth(this.schedule.selector) // note that all functions in this contract are ACL protected (commonly some of them will be open for any addr to perform)\\n        returns (bytes32 containerHash)\\n    {   \\n        // prevent griefing by front-running (the same container is sent by two different people and one must be challenged)\\n        require(_container.payload.nonce == ++nonce, \\\"queue: bad nonce\\\");\\n        // hash using ERC3000Data.hash(ERC3000Data.Config)\\n        bytes32 _configHash = _container.config.hash();\\n        // ensure that the hash of the config passed in the container matches the current config (implicit agreement approval by scheduler)\\n        require(_configHash == configHash, \\\"queue: bad config\\\");\\n        // ensure that the time delta to the execution timestamp provided in the payload is at least after the config's execution delay\\n        require(_container.payload.executionTime >= block.timestamp + _container.config.executionDelay, \\\"queue: bad delay\\\");\\n        // ensure that the submitter of the payload is also the sender of this call\\n        require(_container.payload.submitter == msg.sender, \\\"queue: bad submitter\\\");\\n\\n        containerHash = ERC3000Data.containerHash(_container.payload.hash(), _configHash);\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.None, // ensure that the state for this container is None\\n            GovernQueueStateLib.State.Scheduled // and if so perform a state transition to Scheduled\\n        );\\n        // we don't need to save any more state about the container in storage\\n        // we just authenticate the hash and assign it a state, since all future\\n        // actions regarding the container will need to provide it as a witness\\n        // all witnesses are logged from this contract at least once, so the \\n        // trust assumption should be the same as storing all on-chain (move complexity to clients)\\n\\n        ERC3000Data.Collateral memory collateral = _container.config.scheduleDeposit;\\n        collateral.collectFrom(_container.payload.submitter); // pull collateral from submitter (requires previous approval)\\n\\n        // TODO: pay court tx fee\\n\\n        // emit an event to ensure data availability of all state that cannot be otherwise fetched (see how config isn't emitted since an observer should already have it)\\n        emit Scheduled(containerHash, _container.payload);\\n    }\\n\\n    /**\\n     * @notice Executes an action after its execution delayed has passed and its state hasn't been altered by a challenge or veto\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     */\\n    function execute(ERC3000Data.Container memory _container)\\n        public\\n        override\\n        auth(this.execute.selector) // in most instances this will be open for any addr, but leaving configurable for flexibility\\n        returns (bytes32 failureMap, bytes[] memory execResults)\\n    {\\n        // ensure enough time has passed\\n        require(uint64(block.timestamp) >= _container.payload.executionTime, \\\"queue: wait more\\\");\\n\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled, // note that we will revert here if the container wasn't previously scheduled\\n            GovernQueueStateLib.State.Executed\\n        );\\n\\n        _container.config.scheduleDeposit.releaseTo(_container.payload.submitter); // release collateral to executor\\n\\n        return _execute(_container.payload, containerHash);\\n    }\\n\\n    /**\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * @param _reason Hint for case reviewers as to why the scheduled container is illegal\\n     */\\n    function challenge(ERC3000Data.Container memory _container, bytes memory _reason) auth(this.challenge.selector) override public returns (uint256 disputeId) {\\n        bytes32 containerHash = _container.hash();\\n        challengerCache[containerHash] = msg.sender; // cache challenger address while it is needed\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled,\\n            GovernQueueStateLib.State.Challenged\\n        );\\n\\n        ERC3000Data.Collateral memory collateral = _container.config.challengeDeposit;\\n        collateral.collectFrom(msg.sender); // pull challenge collateral from sender\\n\\n        // create dispute on arbitrator\\n        IArbitrator arbitrator = IArbitrator(_container.config.resolver);\\n        (address recipient, ERC20 feeToken, uint256 feeAmount) = arbitrator.getDisputeFees();\\n        require(feeToken.safeTransferFrom(msg.sender, address(this), feeAmount), \\\"queue: bad fee pull\\\");\\n        require(feeToken.safeApprove(recipient, feeAmount), \\\"queue: bad approve\\\");\\n        disputeId = arbitrator.createDispute(2, abi.encode(_container)); // create dispute sending full container ABI encoded (could prob just send payload to save gas)\\n        require(feeToken.safeApprove(recipient, 0), \\\"queue: bad reset\\\"); // for security with non-compliant tokens (that fail on non-zero to non-zero approvals)\\n\\n        // submit both arguments as evidence and close evidence period. no more evidence can be submitted and a settlement can't happen (could happen off-protocol)\\n        emit EvidenceSubmitted(arbitrator, disputeId, _container.payload.submitter, _container.payload.proof, true);\\n        emit EvidenceSubmitted(arbitrator, disputeId, msg.sender, _reason, true);\\n        arbitrator.closeEvidencePeriod(disputeId);\\n\\n        disputeItemCache[arbitrator][disputeId] = containerHash; // cache a relation between disputeId and containerHash while needed\\n\\n        emit Challenged(containerHash, msg.sender, _reason, disputeId, collateral);\\n    }\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * @param _disputeId disputeId in the arbitrator in which the dispute over the container was created\\n     */\\n    function resolve(ERC3000Data.Container memory _container, uint256 _disputeId) override public returns (bytes32 failureMap, bytes[] memory execResults) {\\n        bytes32 containerHash = _container.hash();\\n        if (queue[containerHash].state == GovernQueueStateLib.State.Challenged) {\\n            // will re-enter in `rule`, `rule` will perform state transition depending on ruling\\n            IArbitrator(_container.config.resolver).executeRuling(_disputeId);\\n        } // else continue, as we must \\n\\n        GovernQueueStateLib.State state = queue[containerHash].state;\\n\\n        emit Resolved(containerHash, msg.sender, state == GovernQueueStateLib.State.Approved);\\n\\n        if (state == GovernQueueStateLib.State.Approved) {\\n            return executeApproved(_container);\\n        }\\n\\n        require(state == GovernQueueStateLib.State.Rejected, \\\"queue: unresolved\\\");\\n        settleRejection(_container);\\n        return (bytes32(0), new bytes[](0));\\n    }\\n\\n    function veto(bytes32 _containerHash, bytes memory _reason) auth(this.veto.selector) override public {\\n        queue[_containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled,\\n            GovernQueueStateLib.State.Cancelled\\n        );\\n\\n        emit Vetoed(_containerHash, msg.sender, _reason);\\n    }\\n\\n    /**\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\n     * @param _config A ERC3000Data.Config struct holding all the new params that will control the queue\\n     */\\n    function configure(ERC3000Data.Config memory _config)\\n        public\\n        override\\n        auth(this.configure.selector)\\n        returns (bytes32)\\n    {\\n        return _setConfig(_config);\\n    }\\n\\n    // Finalization functions\\n    // In the happy path, they are not externally called (triggered from resolve -> rule -> executeApproved | settleRejection), but left public for security\\n\\n    function executeApproved(ERC3000Data.Container memory _container) public returns (bytes32 failureMap, bytes[] memory execResults) {\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Approved,\\n            GovernQueueStateLib.State.Executed\\n        );\\n\\n        // release all collateral to submitter\\n        _container.config.scheduleDeposit.releaseTo(_container.payload.submitter);\\n        _container.config.challengeDeposit.releaseTo(_container.payload.submitter);\\n\\n        challengerCache[containerHash] = address(0); // release state, refund gas, no longer needed in state\\n\\n        return _execute(_container.payload, containerHash);\\n    }\\n\\n    function settleRejection(ERC3000Data.Container memory _container) public {\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Rejected,\\n            GovernQueueStateLib.State.Cancelled\\n        );\\n\\n        address challenger = challengerCache[containerHash];\\n\\n        // release all collateral to challenger\\n        _container.config.scheduleDeposit.releaseTo(challenger);\\n        _container.config.challengeDeposit.releaseTo(challenger);\\n        challengerCache[containerHash] = address(0); // release state, refund gas, no longer needed in state\\n    }\\n\\n    // Arbitrable\\n\\n    function rule(uint256 _disputeId, uint256 _ruling) override external {\\n        // implicit check that msg.sender was actually arbitrating a dispute over this container\\n        IArbitrator arbitrator = IArbitrator(msg.sender);\\n        bytes32 containerHash = disputeItemCache[arbitrator][_disputeId];\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Challenged,\\n            _ruling == ALLOW_RULING ? GovernQueueStateLib.State.Approved : GovernQueueStateLib.State.Rejected\\n        );\\n        disputeItemCache[arbitrator][_disputeId] = bytes32(0); // refund gas, no longer needed in state\\n\\n        emit Ruled(arbitrator, _disputeId, _ruling);\\n    }\\n\\n    function submitEvidence(\\n        uint256,\\n        bytes calldata,\\n        bool\\n    ) external override {\\n        revert(\\\"queue: evidence\\\");\\n    }\\n\\n    // Internal\\n\\n    function _execute(ERC3000Data.Payload memory _payload, bytes32 _containerHash) internal returns (bytes32, bytes[] memory) {\\n        emit Executed(_containerHash, msg.sender);\\n        return _payload.executor.exec(_payload.actions, _payload.allowFailuresMap, _containerHash);\\n    }\\n\\n    function _setConfig(ERC3000Data.Config memory _config)\\n        internal\\n        returns (bytes32)\\n    {\\n        configHash = _config.hash();\\n\\n        emit Configured(configHash, msg.sender, _config);\\n\\n        return configHash;\\n    }\\n}\\n\",\"keccak256\":\"0x3ba5d7e3b4a1776c4e1dee0e1fccb5f8312227e011a274a0c5b6576ac4e87e99\",\"license\":\"GPL-3.0\"},\"contracts/core-factories/GovernQueueFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@aragon/govern-core/contracts/pipelines/GovernQueue.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/minimal-proxies/ERC1167ProxyFactory.sol\\\";\\n\\ncontract GovernQueueFactory {\\n    using ERC1167ProxyFactory for address;\\n\\n    address public base;\\n\\n    constructor() public {\\n        setupBase();\\n    }\\n\\n    function newQueue(address _aclRoot, ERC3000Data.Config memory _config, bytes32 _salt) public returns (GovernQueue queue) {\\n        if (_salt != bytes32(0)) {\\n            return GovernQueue(base.clone2(_salt, abi.encodeWithSelector(queue.initialize.selector, _aclRoot, _config)));\\n        } else {\\n            return new GovernQueue(_aclRoot, _config);\\n        }\\n    }\\n\\n    function setupBase() private {\\n        ERC3000Data.Collateral memory noCollateral;\\n        ERC3000Data.Config memory config = ERC3000Data.Config(\\n            0,\\n            noCollateral,\\n            noCollateral,\\n            address(0),\\n            \\\"\\\"\\n        );\\n        base = address(new GovernQueue(address(2), config));\\n    }\\n}\\n\",\"keccak256\":\"0x6782fb1fcfa38b6ab4e9ed632486034e1f0cfa84f96859176693d90dda7f06c3\",\"license\":\"GPL-3.0\"},\"erc3k/contracts/ERC3000Data.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC3000Executor.sol\\\";\\n\\nlibrary ERC3000Data {\\n    // TODO: come up with a non-shitty name\\n    struct Container {\\n        Payload payload;\\n        Config config;\\n    }\\n\\n    // WARN: Always remember to change the 'hash' function if modifying the struct\\n    struct Payload {\\n        uint256 nonce;\\n        uint256 executionTime;\\n        address submitter;\\n        IERC3000Executor executor;\\n        Action[] actions;\\n        bytes32 allowFailuresMap;\\n        bytes proof;\\n    }\\n\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct Config {\\n        uint256 executionDelay;\\n        Collateral scheduleDeposit;\\n        Collateral challengeDeposit;\\n        address resolver;\\n        bytes rules;\\n    }\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function containerHash(bytes32 payloadHash, bytes32 configHash) internal view returns (bytes32) {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        return keccak256(abi.encodePacked(\\\"erc3k-v1\\\", address(this), chainId, payloadHash, configHash));\\n    }\\n\\n    function hash(Container memory container) internal view returns (bytes32) {\\n        return containerHash(hash(container.payload), hash(container.config));\\n    }\\n\\n    function hash(Payload memory payload) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(\\n                payload.nonce,\\n                payload.executionTime,\\n                payload.submitter,\\n                payload.executor,\\n                keccak256(abi.encode(payload.actions)),\\n                payload.allowFailuresMap,\\n                keccak256(payload.proof)\\n            )\\n        );\\n    }\\n\\n    function hash(Config memory config) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(config));\\n    }\\n}\\n\",\"keccak256\":\"0x361ff1535d9950c8140bc71ec5102018bf2c14d7d33fef965ccea0656866bab5\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\ncontract ERC3000Interface {\\n    bytes4 internal constant ERC3000_INTERFACE_ID =\\n        IERC3000(0).schedule.selector\\n        ^ IERC3000(0).execute.selector\\n        ^ IERC3000(0).challenge.selector\\n        ^ IERC3000(0).resolve.selector\\n        ^ IERC3000(0).veto.selector\\n        ^ IERC3000(0).configure.selector\\n    ;\\n}\\n\\nabstract contract IERC3000 is ERC3000Interface {\\n    /**\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window\\n     * @param container A Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @return containerHash\\n     */\\n    function schedule(ERC3000Data.Container memory container) virtual public returns (bytes32 containerHash);\\n    event Scheduled(bytes32 indexed containerHash, ERC3000Data.Payload payload);\\n\\n    /**\\n     * @notice Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\\n     * @param container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * MUST be an ERC3000Executor call: payload.executor.exec(payload.actions)\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function execute(ERC3000Data.Container memory container) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(bytes32 indexed containerHash, address indexed actor);\\n\\n    /**\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param reason Hint for case reviewers as to why the scheduled container is illegal\\n     * @return resolverId\\n     */\\n    function challenge(ERC3000Data.Container memory container, bytes memory reason) virtual public returns (uint256 resolverId);\\n    event Challenged(bytes32 indexed containerHash, address indexed actor, bytes reason, uint256 resolverId, ERC3000Data.Collateral collateral);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param resolverId disputeId in the arbitrator in which the dispute over the container was created\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function resolve(ERC3000Data.Container memory container, uint256 resolverId) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Resolved(bytes32 indexed containerHash, address indexed actor, bool approved);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param containerHash Hash of the container being vetoed\\n     * @param reason Justification for the veto\\n     */\\n    function veto(bytes32 containerHash, bytes memory reason) virtual public;\\n    event Vetoed(bytes32 indexed containerHash, address indexed actor, bytes reason);\\n\\n    /**\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\n     * @param config A ERC3000Data.Config struct holding all the new params that will control the system\\n     * @return configHash\\n     */\\n    function configure(ERC3000Data.Config memory config) virtual public returns (bytes32 configHash);\\n    event Configured(bytes32 indexed containerHash, address indexed actor, ERC3000Data.Config config);\\n}\\n\",\"keccak256\":\"0x274bc6206afff001e43f8c51ecddc1af5f6576cb0cf8738669211e7a384398b2\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000Executor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\nabstract contract IERC3000Executor {\\n    bytes4 internal constant ERC3000_EXEC_INTERFACE_ID = this.exec.selector;\\n\\n    /**\\n     * @notice Executes all given actions\\n     * @param actions A array of ERC3000Data.Action for later executing those\\n     * @param allowFailuresMap A map with the allowed failures\\n     * @param memo The hash of the ERC3000Data.Container\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(address indexed actor, ERC3000Data.Action[] actions, bytes32 memo, bytes32 failureMap, bytes[] execResults);\\n}\\n\",\"keccak256\":\"0x568a412f560f477d831f5bc0bec927045686eea66a3a797c3f6784c7acefbf74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80635001f3b5146200003f578063a0b19f4a1462000061575b600080fd5b6200004962000078565b60405162000058919062000679565b60405180910390f35b620000496200007236600462000491565b62000094565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600081156200016b5762000163826359b6907a60e01b8686604051602401620000bf9291906200069a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915260005473ffffffffffffffffffffffffffffffffffffffff16919063ffffffff620001b016565b9050620001a9565b83836040516200017b90620003c1565b620001889291906200069a565b604051809103906000f080158015620001a5573d6000803e3d6000fd5b5090505b9392505050565b6000620001be84846200028e565b9050600060608273ffffffffffffffffffffffffffffffffffffffff1684604051620001eb91906200065b565b6000604051808303816000865af19150503d80600081146200022a576040519150601f19603f3d011682016040523d82523d6000602084013e6200022f565b606091505b509150915081620002408262000302565b9062000284576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200027b919062000718565b60405180910390fd5b5050509392505050565b600060606200029d8462000349565b9050826037602083016000f5915073ffffffffffffffffffffffffffffffffffffffff8216620002fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200027b906200072d565b5092915050565b606060448251101562000325575060408051602081019091526000815262000344565b600482019150818060200190518101906200034191906200056b565b90505b919050565b604080516037808252606082810190935260208201818036833750507f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000060208301525060609290921b6034830152507f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000604882015290565b614125806200082983390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114620003f457600080fd5b92915050565b600082601f8301126200040b578081fd5b8135620004226200041c826200078c565b62000764565b91508082528360208285010111156200043a57600080fd5b8060208401602084013760009082016020015292915050565b60006040828403121562000465578081fd5b62000471604062000764565b90506200047f8383620003cf565b81526020820135602082015292915050565b600080600060608486031215620004a6578283fd5b8335620004b38162000802565b9250602084013567ffffffffffffffff80821115620004d0578384fd5b81860160e08189031215620004e3578485fd5b620004ef60a062000764565b92508035835262000504886020830162000453565b602084015262000518886060830162000453565b60408401526200052c8860a08301620003cf565b606084015260c08101358281111562000543578586fd5b6200055189828401620003fa565b608085015250505080925050604084013590509250925092565b6000602082840312156200057d578081fd5b815167ffffffffffffffff81111562000594578182fd5b80830184601f820112620005a6578283fd5b80519150620005b96200041c836200078c565b828152856020848401011115620005ce578384fd5b620005e1836020830160208501620007cf565b95945050505050565b6000815180845262000604816020860160208601620007cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b600082516200066f818460208701620007cf565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808516835260406020840152835160408401526020840151620006d8606085018262000636565b506040840151620006ed60a085018262000636565b508060608501511660e084015250608083015160e0610100840152620005e1610120840182620005ea565b600060208252620001a96020830184620005ea565b6020808252601a908201527f70726f78792d666163746f72793a206261642063726561746532000000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156200078457600080fd5b604052919050565b600067ffffffffffffffff821115620007a3578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015620007ec578181015183820152602001620007d2565b83811115620007fc576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146200082557600080fd5b5056fe60806040523480156200001157600080fd5b506040516200412538038062004125833981016040819052620000349162000536565b8180600260405162000046906200068e565b90815260200160405180910390205460001415620000725762000072816001600160e01b036200009216565b506200008a905082826001600160e01b036200016c16565b505062000854565b604051806040016040528060038152602001621858db60ea1b815250600281604051620000c0919062000670565b908152602001604051809103902054600014620000fa5760405162461bcd60e51b8152600401620000f190620006eb565b60405180910390fd5b436002826040516200010d919062000670565b908152604051908190036020019020556200013963161b7d8160e21b836001600160e01b03620002ad16565b8060405162000149919062000670565b604051908190038120906000805160206200410583398151915290600090a25050565b8160026040516200017d906200068e565b90815260200160405180910390205460001415620001a957620001a9816001600160e01b036200009216565b60405180604001604052806005815260200164717565756560d81b815250600281604051620001d9919062000670565b9081526020016040518091039020546000146200020a5760405162461bcd60e51b8152600401620000f190620006eb565b436002826040516200021d919062000670565b9081526040519081900360200190205562000241836001600160e01b03620002c816565b506200025d6388f3ee6960e01b6001600160e01b036200032a16565b620002786322f8ea5560e11b6001600160e01b036200032a16565b8060405162000288919062000670565b604051908190038120906000805160206200410583398151915290600090a250505050565b620002c4828260026001600160e01b036200038b16565b5050565b6000620002e0826200047560201b620019bf1760201c565b60048190556040513391907f0a61dcdfcdfc6da74a563de8455cc4ae6d6c9d0b442eb2f7309e6b31e4680d79906200031a90869062000756565b60405180910390a3505060045490565b6001600160e01b0319811660009081526020819052604090819020805460ff19166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca90620003809083906200069d565b60405180910390a150565b6200039f836001600160e01b03620004a716565b15620003bf5760405162461bcd60e51b8152600401620000f190620006c6565b6001600160a01b03821660011415620003ec5760405162461bcd60e51b8152600401620000f1906200072d565b6001600160e01b0319831660008181526003602090815260408083206001600160a01b03878116808652919093529281902080546001600160a01b0319169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e70919062000468908690620006b2565b60405180910390a4505050565b6000816040516020016200048a919062000756565b604051602081830303815290604052805190602001209050919050565b6001600160e01b031916600090815260036020908152604080832060018085529252909120546001600160a01b03161490565b80516001600160a01b0381168114620004f257600080fd5b92915050565b6000604082840312156200050a578081fd5b620005166040620007e1565b9050620005248383620004da565b81526020820151602082015292915050565b6000806040838503121562000549578182fd5b620005558484620004da565b602084810151919350906001600160401b038082111562000574578384fd5b81860160e0818903121562000587578485fd5b6200059360a0620007e1565b925080518352620005a788858301620004f8565b84840152620005ba8860608301620004f8565b604084015260a0810151620005cf816200083b565b606084015260c081015182811115620005e6578586fd5b80820189601f820112620005f8578687fd5b805192508383111562000609578687fd5b6200061d601f8401601f19168701620007e1565b9350828452898684830101111562000633578687fd5b620006448387860188840162000808565b505050608082015292959294509192505050565b80516001600160a01b03168252602090810151910152565b600082516200068481846020870162000808565b9190910192915050565b621858db60ea1b815260030190565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b6020808252600b908201526a30b1b61d10333937bd32b760a91b604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a604082015261195960f21b606082015260800190565b6020808252600f908201526e61636c3a2062616420667265657a6560881b604082015260600190565b60006020825282516020830152602083015162000777604084018262000658565b5060408301516200078c608084018262000658565b5060608301516001600160a01b031660c0830152608083015160e08084015280516101008401819052610120620007ca828287016020860162000808565b80601f19601f840116860101935050505092915050565b6040518181016001600160401b03811182821017156200080057600080fd5b604052919050565b60005b83811015620008255781810151838201526020016200080b565b8381111562000835576000848401525b50505050565b6001600160a01b03811681146200085157600080fd5b50565b6138a180620008646000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80637c10dea6116100f9578063b8ebe05e11610097578063c04c87b811610071578063c04c87b8146103b7578063c8182af0146103ca578063cc1d4cab146103dd578063e1f1176d146103f0576101b9565b8063b8ebe05e1461037e578063b9e9823f14610391578063bdf9a726146103a4576101b9565b8063977d8964116100d3578063977d89641461033d578063a157a10d14610350578063a215722714610363578063affed0e014610376576101b9565b80637c10dea6146102e85780637e8c7f081461030857806396fc8abd1461031d576101b9565b80633b1c5fc6116101665780635884973411610140578063588497341461029c57806359b6907a146102af57806370576158146102c257806372896761146102d5576101b9565b80633b1c5fc614610256578063495a98251461027657806355a3315914610289576101b9565b80632a0d403e116101975780632a0d403e1461020f578063311a6c56146102305780633a139c7114610243576101b9565b806301ffc9a7146101be578063097c8108146101e75780631c47671b146101fa575b600080fd5b6101d16101cc366004612aa9565b6103f8565b6040516101de9190613154565b60405180910390f35b6101d16101f5366004612afd565b610442565b61020d6102083660046128c5565b6106c4565b005b61022261021d366004612cc2565b610804565b6040516101de929190613168565b61020d61023e366004612da4565b61099f565b610222610251366004612c38565b610a60565b610269610264366004612ba7565b610b5f565b6040516101de919061315f565b6101d1610284366004612aa9565b610b7c565b610222610297366004612c38565b610bd4565b61020d6102aa366004612ac5565b610c91565b61020d6102bd366004612877565b610d1a565b6102696102d0366004612c6b565b610e7e565b6102696102e3366004612c05565b611360565b6102fb6102f63660046129c0565b6113d1565b6040516101de91906132d1565b6103106113e6565b6040516101de91906131ee565b61033061032b366004612ac5565b61140a565b6040516101de91906130a4565b61026961034b366004612c38565b61143d565b61020d61035e366004612ac5565b611613565b61020d610371366004612b5d565b61169c565b61026961172c565b61020d61038c366004612c38565b611732565b61020d61039f366004612d1d565b6117f5565b61020d6103b2366004612aa9565b61180d565b61020d6103c5366004612a6e565b611899565b6103306103d83660046129c0565b611974565b6102696103eb366004612bd2565b61199c565b6102696119b9565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604081205460ff168061043c575061043c826119ef565b92915050565b7fffffffff000000000000000000000000000000000000000000000000000000008316600090815260036020908152604080832033845290915281205473ffffffffffffffffffffffffffffffffffffffff16801561057b5773ffffffffffffffffffffffffffffffffffffffff8116600214156104c45760019150506106bd565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c81089061051a9088908890889060040161321b565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906129a4565b1561057b5760019150506106bd565b7fffffffff000000000000000000000000000000000000000000000000000000008516600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8085529252909120541680156106b65773ffffffffffffffffffffffffffffffffffffffff8116600214156105fe576001925050506106bd565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c8108906106549089908990899060040161321b565b602060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a691906129a4565b156106b6576001925050506106bd565b6000925050505b9392505050565b60408051602036601f81018290048202830182019093528282527f586df604000000000000000000000000000000000000000000000000000000009261072792849233926000918190840183828082843760009201919091525061044292505050565b61074c5760405162461bcd60e51b81526004016107439061336c565b60405180910390fd5b60005b82518110156107ff576107606124a6565b83828151811061076c57fe5b602002602001015190506000600281111561078357fe5b8151600281111561079057fe5b14156107ad576107a881602001518260400151611a46565b6107f6565b6001815160028111156107bc57fe5b14156107d4576107a881602001518260400151611a52565b6002815160028111156107e357fe5b14156107f6576107f68160200151611b20565b5060010161074f565b505050565b60006060600061081385611bd8565b9050600260008281526006602081905260409091205460ff169081111561083657fe5b14156108b05784602001516060015173ffffffffffffffffffffffffffffffffffffffff16638bb04875856040518263ffffffff1660e01b815260040161087d919061315f565b600060405180830381600087803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b505050505b60008181526006602052604090205460ff1633827f027d8a5d945eb361475964ed2c71b8332b27af2d630ab5daf829d67afd2584e660038460068111156108f357fe5b146040516109019190613154565b60405180910390a3600381600681111561091757fe5b14156109315761092686610bd4565b935093505050610998565b600481600681111561093f57fe5b1461095c5760405162461bcd60e51b815260040161074390613694565b61096586611732565b6040805160008082526020820190925281610990565b606081526020019060019003908161097b5790505b509350935050505b9250929050565b3360008181526008602090815260408083208684529091529020546109ec6002600485146109ce5760046109d1565b60035b6000848152600660205260409020919063ffffffff611bfc16565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260086020908152604080832088845290915280822091909155518591907f56c8631a8915c0d362dbe57a61215fdde954f73f81c8a3a1f55572fb015207b190610a5290879061315f565b60405180910390a350505050565b60006060633a139c7160e01b610aae81336000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044292505050565b610aca5760405162461bcd60e51b81526004016107439061336c565b83516020015167ffffffffffffffff42161015610af95760405162461bcd60e51b8152600401610743906135ef565b6000610b0485611bd8565b6000818152600660208190526040909120919250610b2b919060019063ffffffff611bfc16565b8451604001516020808701510151610b489163ffffffff611c1016565b8451610b549082611ccb565b935093505050915091565b600860209081526000928352604080842090915290825290205481565b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360209081526040808320600180855292529091205473ffffffffffffffffffffffffffffffffffffffff161490565b600060606000610be384611bd8565b6000818152600660208190526040909120919250610c0a919060039063ffffffff611bfc16565b8351604001516020808601510151610c279163ffffffff611c1016565b8351604090810151602086015190910151610c479163ffffffff611c1016565b600081815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690558351610c879082611ccb565b9250925050915091565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610cf492849233926000918190840183828082843760009201919091525061044292505050565b610d105760405162461bcd60e51b81526004016107439061336c565b6107ff8383611a52565b816002604051610d2990612fba565b90815260200160405180910390205460001415610d4957610d4981611dc5565b6040518060400160405280600581526020017f7175657565000000000000000000000000000000000000000000000000000000815250600281604051610d8f9190612f9e565b908152602001604051809103902054600014610dbd5760405162461bcd60e51b815260040161074390613592565b43600282604051610dce9190612f9e565b90815260405190819003602001902055610de783611ec6565b50610e117f88f3ee6900000000000000000000000000000000000000000000000000000000611f19565b610e3a7f45f1d4aa00000000000000000000000000000000000000000000000000000000611f19565b80604051610e489190612f9e565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a250505050565b6000637057615860e01b610eca81336000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044292505050565b610ee65760405162461bcd60e51b81526004016107439061336c565b6000610ef185611bd8565b600081815260076020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560069091529020909150610f47906001600263ffffffff611bfc16565b610f4f6124c8565b50602085015160400151610f69813363ffffffff611fae16565b6000866020015160600151905060008060008373ffffffffffffffffffffffffffffffffffffffff16637b751b9e6040518163ffffffff1660e01b815260040160606040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190612835565b9194509250905061102873ffffffffffffffffffffffffffffffffffffffff831633308463ffffffff61206b16565b6110445760405162461bcd60e51b815260040161074390613448565b61106b73ffffffffffffffffffffffffffffffffffffffff8316848363ffffffff61212116565b6110875760405162461bcd60e51b815260040161074390613524565b8373ffffffffffffffffffffffffffffffffffffffff1663c13517e160028c6040516020016110b691906136de565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016110e29291906132e5565b602060405180830381600087803b1580156110fc57600080fd5b505af1158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190612d05565b975061115e73ffffffffffffffffffffffffffffffffffffffff831684600063ffffffff61212116565b61117a5760405162461bcd60e51b815260040161074390613411565b89600001516040015173ffffffffffffffffffffffffffffffffffffffff16888573ffffffffffffffffffffffffffffffffffffffff167f1988e4d59f596ba1a2d81e06874704a62502463ae6d99154f923e5edeb98392b8d6000015160c0015160016040516111eb929190613285565b60405180910390a43373ffffffffffffffffffffffffffffffffffffffff16888573ffffffffffffffffffffffffffffffffffffffff167f1988e4d59f596ba1a2d81e06874704a62502463ae6d99154f923e5edeb98392b8c6001604051611254929190613285565b60405180910390a46040517f7e9adccf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690637e9adccf906112ae908b9060040161315f565b600060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff851660009081526008602090815260408083208c8452909152908190208890555133915087907f429df837eb45b6713f725a0d3e57db939fd7dd7d58bb3cd967fa37091572db9f9061134b908d908d908b906132a9565b60405180910390a35050505050505092915050565b6000637289676160e01b6113ac81336000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044292505050565b6113c85760405162461bcd60e51b81526004016107439061336c565b6106bd83611ec6565b60066020526000908152604090205460ff1681565b7f586df6040000000000000000000000000000000000000000000000000000000081565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b600063977d896460e01b61148981336000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044292505050565b6114a55760405162461bcd60e51b81526004016107439061336c565b6005805460010190819055835151146114d05760405162461bcd60e51b8152600401610743906133a3565b60006114df84602001516119bf565b905060045481146115025760405162461bcd60e51b815260040161074390613335565b836020015160000151420184600001516020015110156115345760405162461bcd60e51b8152600401610743906133da565b83516040015173ffffffffffffffffffffffffffffffffffffffff16331461156e5760405162461bcd60e51b81526004016107439061347f565b61158461157e85600001516121d2565b8261223a565b60008181526006602052604081209194506115a79190600163ffffffff611bfc16565b6115af6124c8565b5060208085015101518451604001516115cf90829063ffffffff611fae16565b837f67f87ff46443c95843c7bd72a026dd23ba0015528ce9f8f15c5c6917645034ef86600001516040516116039190613735565b60405180910390a2505050919050565b60408051602036601f81018290048202830182019093528282527f586df604000000000000000000000000000000000000000000000000000000009261167692849233926000918190840183828082843760009201919091525061044292505050565b6116925760405162461bcd60e51b81526004016107439061336c565b6107ff8383611a46565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926116ff92849233926000918190840183828082843760009201919091525061044292505050565b61171b5760405162461bcd60e51b81526004016107439061336c565b611726848484612275565b50505050565b60055481565b600061173d82611bd8565b6000818152600660205260409020909150611761906004600563ffffffff611bfc16565b600081815260076020908152604090912054838201519091015173ffffffffffffffffffffffffffffffffffffffff909116906117a4908263ffffffff611c1016565b6020830151604001516117bd908263ffffffff611c1016565b50600090815260076020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b60405162461bcd60e51b8152600401610743906134b6565b60408051602036601f81018290048202830182019093528282527f586df604000000000000000000000000000000000000000000000000000000009261187092849233926000918190840183828082843760009201919091525061044292505050565b61188c5760405162461bcd60e51b81526004016107439061336c565b61189582611b20565b5050565b63c04c87b860e01b6118e381336000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044292505050565b6118ff5760405162461bcd60e51b81526004016107439061336c565b6000838152600660205260409020611920906001600563ffffffff611bfc16565b3373ffffffffffffffffffffffffffffffffffffffff16837fe2530b9681f9726904f9ca7fe725c0c53ea1b72370981ac6a5beaa9758c8c356846040516119679190613272565b60405180910390a3505050565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b805160208183018101805160028252928201919093012091525481565b60045481565b6000816040516020016119d291906136cb565b604051602081830303815290604052805190602001209050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061043c57505060014214919050565b61189582826002612275565b611a5b82610b7c565b15611a785760405162461bcd60e51b8152600401610743906134ed565b7fffffffff000000000000000000000000000000000000000000000000000000008216600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055519092339290917f682f2c466c1e9f6883eb72cbced01373e1cb18b05ae5c8bc04dc73d73e29f8cd9190a45050565b611b2981610b7c565b15611b465760405162461bcd60e51b8152600401610743906134ed565b7fffffffff00000000000000000000000000000000000000000000000000000000811660008181526003602090815260408083206001808552925280832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155513392917f049c6b8b07a879425742523fa80f8ffb25e39ad518c93a5896a0df19518397e591a350565b600061043c611bea83600001516121d2565b611bf784602001516119bf565b61223a565b611c068383612396565b6107ff83826123cf565b6020820151156118955781516020830151611c4a9073ffffffffffffffffffffffffffffffffffffffff831690849063ffffffff61240e16565b611c665760405162461bcd60e51b81526004016107439061355b565b8173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff167fc1c90b8e0705b212262c0dbd7580efe1862c2f185bf96899226f7596beb2db098560200151604051611967919061315f565b604051600090606090339084907f59c3746e635078efc737fb3f37dd8188203b8df10bbad35878a7d156f4f51c41908590a3836060015173ffffffffffffffffffffffffffffffffffffffff1663c2d85afc85608001518660a00151866040518463ffffffff1660e01b8152600401611d469392919061312f565b600060405180830381600087803b158015611d6057600080fd5b505af1158015611d74573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611dba91908101906129d8565b915091509250929050565b6040518060400160405280600381526020017f61636c0000000000000000000000000000000000000000000000000000000000815250600281604051611e0b9190612f9e565b908152602001604051809103902054600014611e395760405162461bcd60e51b815260040161074390613592565b43600282604051611e4a9190612f9e565b90815260405190819003602001902055611e847f586df6040000000000000000000000000000000000000000000000000000000083611a46565b80604051611e929190612f9e565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a25050565b6000611ed1826119bf565b60048190556040513391907f0a61dcdfcdfc6da74a563de8455cc4ae6d6c9d0b442eb2f7309e6b31e4680d7990611f099086906136cb565b60405180910390a3505060045490565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca90611fa39083906131ee565b60405180910390a150565b6020820151156118955781516020830151611fea9073ffffffffffffffffffffffffffffffffffffffff8316908490309063ffffffff61206b16565b6120065760405162461bcd60e51b815260040161074390613626565b8173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff167fec36c0364d931187a76cf66d7eee08fad0ec2e8b7458a8d8b26b36769d4d13f38560200151604051611967919061315f565b600060606323b872dd60e01b85858560405160240161208c939291906130c5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050612115868261242d565b9150505b949350505050565b6000606063095ea7b360e01b84846040516024016121409291906130f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506121c9858261242d565b95945050505050565b6000816000015182602001518360400151846060015185608001516040516020016121fd919061311c565b604051602081830303815290604052805190602001208660a001518760c00151805190602001206040516020016119d2979695949392919061304b565b6040516000904690612256903090839087908790602001612fe3565b6040516020818303038152906040528051906020012091505092915050565b61227e83610b7c565b1561229b5760405162461bcd60e51b8152600401610743906134ed565b73ffffffffffffffffffffffffffffffffffffffff8216600114156122d25760405162461bcd60e51b81526004016107439061365d565b7fffffffff000000000000000000000000000000000000000000000000000000008316600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff878116808652919093529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091906123899086906130a4565b60405180910390a4505050565b8060068111156123a257fe5b825460ff1660068111156123b257fe5b146118955760405162461bcd60e51b8152600401610743906132fe565b8154819083907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600681111561240557fe5b02179055505050565b6000606063a9059cbb60e01b84846040516024016121409291906130f6565b600061244e8373ffffffffffffffffffffffffffffffffffffffff166124a0565b61245a5750600061043c565b6040516020818451602086016000885af18015612498573d8015612485576020811461248e57612496565b60019350612496565b600183511493505b505b505092915050565b3b151990565b6040805160608101909152806000815260006020820181905260409091015290565b604080518082019091526000808252602082015290565b803561043c816137fd565b600082601f8301126124fa578081fd5b813561250d6125088261376f565b613748565b818152915060208083019084810160005b848110156125c157813587016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561255d57600080fd5b61256681613748565b6125728b8785016124df565b8152604080840135878301528284013567ffffffffffffffff81111561259757600080fd5b6125a58d89838801016125cc565b918301919091525086525050928201929082019060010161251e565b505050505092915050565b600082601f8301126125dc578081fd5b81356125ea6125088261378f565b915080825283602082850101111561260157600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261262a578081fd5b81516126386125088261378f565b915080825283602082850101111561264f57600080fd5b6126608160208401602086016137d1565b5092915050565b600060408284031215612678578081fd5b6126826040613748565b9050813561268f816137fd565b808252506020820135602082015292915050565b600060e082840312156126b4578081fd5b6126be60a0613748565b9050813581526126d18360208401612667565b60208201526126e38360608401612667565b604082015260a08201356126f6816137fd565b606082015260c082013567ffffffffffffffff81111561271557600080fd5b612721848285016125cc565b60808301525092915050565b60006040828403121561273e578081fd5b6127486040613748565b9050813567ffffffffffffffff8082111561276257600080fd5b81840160e0818703121561277557600080fd5b61277f60e0613748565b9250803583526020810135602084015261279c86604083016124df565b60408401526127ae86606083016124df565b60608401526080810135828111156127c557600080fd5b6127d1878284016124ea565b60808501525060a081013560a084015260c0810135828111156127f357600080fd5b6127ff878284016125cc565b60c085015250509082526020830135908082111561281c57600080fd5b50612829848285016126a3565b60208301525092915050565b600080600060608486031215612849578283fd5b8351612854816137fd565b6020850151909350612865816137fd565b80925050604084015190509250925092565b60008060408385031215612889578182fd5b8235612894816137fd565b9150602083013567ffffffffffffffff8111156128af578182fd5b6128bb858286016126a3565b9150509250929050565b600060208083850312156128d7578182fd5b823567ffffffffffffffff8111156128ed578283fd5b80840185601f8201126128fe578384fd5b8035915061290e6125088361376f565b828152838101908285016060808602850187018a101561292c578788fd5b8794505b858510156129965780828b031215612946578788fd5b61294f81613748565b823561295a8161385e565b81528288013561296981613830565b8189015260408381013561297c816137fd565b908201528452600194909401939286019290810190612930565b509098975050505050505050565b6000602082840312156129b5578081fd5b81516106bd81613822565b6000602082840312156129d1578081fd5b5035919050565b600080604083850312156129ea578182fd5b8251915060208084015167ffffffffffffffff811115612a08578283fd5b80850186601f820112612a19578384fd5b80519150612a296125088361376f565b82815283810190828501865b85811015612a5e57612a4c8b88845188010161261a565b84529286019290860190600101612a35565b5096999098509650505050505050565b60008060408385031215612a80578182fd5b82359150602083013567ffffffffffffffff811115612a9d578182fd5b6128bb858286016125cc565b600060208284031215612aba578081fd5b81356106bd81613830565b60008060408385031215612ad7578182fd5b8235612ae281613830565b91506020830135612af2816137fd565b809150509250929050565b600080600060608486031215612b11578081fd5b8335612b1c81613830565b92506020840135612b2c816137fd565b9150604084013567ffffffffffffffff811115612b47578182fd5b612b53868287016125cc565b9150509250925092565b600080600060608486031215612b71578081fd5b8335612b7c81613830565b92506020840135612b8c816137fd565b91506040840135612b9c816137fd565b809150509250925092565b60008060408385031215612bb9578182fd5b8235612bc4816137fd565b946020939093013593505050565b600060208284031215612be3578081fd5b813567ffffffffffffffff811115612bf9578182fd5b612119848285016125cc565b600060208284031215612c16578081fd5b813567ffffffffffffffff811115612c2c578182fd5b612119848285016126a3565b600060208284031215612c49578081fd5b813567ffffffffffffffff811115612c5f578182fd5b6121198482850161272d565b60008060408385031215612c7d578182fd5b823567ffffffffffffffff80821115612c94578384fd5b612ca08683870161272d565b93506020850135915080821115612cb5578283fd5b506128bb858286016125cc565b60008060408385031215612cd4578182fd5b823567ffffffffffffffff811115612cea578283fd5b612cf68582860161272d565b95602094909401359450505050565b600060208284031215612d16578081fd5b5051919050565b60008060008060608587031215612d32578182fd5b84359350602085013567ffffffffffffffff80821115612d50578384fd5b81870188601f820112612d61578485fd5b8035925081831115612d71578485fd5b886020848301011115612d82578485fd5b6020019450909250506040850135612d9981613822565b939692955090935050565b60008060408385031215612db6578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015612e415782840389528151606073ffffffffffffffffffffffffffffffffffffffff825116865286820151878701526040808301518282890152612e2b83890182612e4e565b9c89019c97505050928601925050600101612de1565b5091979650505050505050565b60008151808452612e668160208601602086016137d1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b6000815183526020820151612ed56020850182612e98565b506040820151612ee86060850182612e98565b5073ffffffffffffffffffffffffffffffffffffffff60608301511660a0840152608082015160e060c085015261211960e0850182612e4e565b60008151835260208201516020840152604082015173ffffffffffffffffffffffffffffffffffffffff80821660408601528060608501511660608601525050608082015160e06080850152612f7b60e0850182612dc5565b60a084015160a086015260c0840151915084810360c08601526121c98183612e4e565b60008251612fb08184602087016137d1565b9190910192915050565b7f61636c0000000000000000000000000000000000000000000000000000000000815260030190565b7f657263336b2d7631000000000000000000000000000000000000000000000000815260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166008850152601c840192909252603c830152605c820152607c0190565b96875260208701959095527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660408801529290931b90911660548501526068840152608883015260a882015260c80190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082526106bd6020830184612dc5565b6000606082526131426060830186612dc5565b60208301949094525060400152919050565b901515815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156131e0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184526131ce868351612e4e565b95509284019290840190600101613194565b509398975050505050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60007fffffffff000000000000000000000000000000000000000000000000000000008516825273ffffffffffffffffffffffffffffffffffffffff84166020830152606060408301526121c96060830184612e4e565b6000602082526106bd6020830184612e4e565b6000604082526132986040830185612e4e565b905082151560208301529392505050565b6000608082526132bc6080830186612e4e565b90508360208301526121196040830184612e98565b60208101600783106132df57fe5b91905290565b6000838252604060208301526121196040830184612e4e565b60208082526010908201527f71756575653a2062616420737461746500000000000000000000000000000000604082015260600190565b60208082526011908201527f71756575653a2062616420636f6e666967000000000000000000000000000000604082015260600190565b60208082526009908201527f61636c3a20617574680000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f71756575653a20626164206e6f6e636500000000000000000000000000000000604082015260600190565b60208082526010908201527f71756575653a206261642064656c617900000000000000000000000000000000604082015260600190565b60208082526010908201527f71756575653a2062616420726573657400000000000000000000000000000000604082015260600190565b60208082526013908201527f71756575653a20626164206665652070756c6c00000000000000000000000000604082015260600190565b60208082526014908201527f71756575653a20626164207375626d6974746572000000000000000000000000604082015260600190565b6020808252600f908201527f71756575653a2065766964656e63650000000000000000000000000000000000604082015260600190565b6020808252600b908201527f61636c3a2066726f7a656e000000000000000000000000000000000000000000604082015260600190565b60208082526012908201527f71756575653a2062616420617070726f76650000000000000000000000000000604082015260600190565b60208082526015908201527f71756575653a206261642073656e6420746f6b656e0000000000000000000000604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a60408201527f6564000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f71756575653a2077616974206d6f726500000000000000000000000000000000604082015260600190565b60208082526014908201527f71756575653a206261642067657420746f6b656e000000000000000000000000604082015260600190565b6020808252600f908201527f61636c3a2062616420667265657a650000000000000000000000000000000000604082015260600190565b60208082526011908201527f71756575653a20756e7265736f6c766564000000000000000000000000000000604082015260600190565b6000602082526106bd6020830184612ebd565b6000602082528251604060208401526136fa6060840182612f22565b602085015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08482030160408501526121c98183612ebd565b6000602082526106bd6020830184612f22565b60405181810167ffffffffffffffff8111828210171561376757600080fd5b604052919050565b600067ffffffffffffffff821115613785578081fd5b5060209081020190565b600067ffffffffffffffff8211156137a5578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156137ec5781810151838201526020016137d4565b838111156117265750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461381f57600080fd5b50565b801515811461381f57600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461381f57600080fd5b6003811061381f57600080fdfea2646970667358221220b79093fb9c4b94afc5e323f44769649f2114f71f3b8e6e2305d21edbf1e6097864736f6c634300060800337bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2a264697066735822122040214f12ae36fdbfeffa17b1b7395ba329964043dfcf3aa8a43ac62670fba0c364736f6c63430006080033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4622,
        "contract": "contracts/core-factories/GovernQueueFactory.sol:GovernQueueFactory",
        "label": "base",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}