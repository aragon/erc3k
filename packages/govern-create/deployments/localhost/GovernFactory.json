{
  "address": "0x091bB90D7D53dE1B8C3C1737f7F242b78E5f28F0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3000",
          "name": "_initialExecutor",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "newGovern",
      "outputs": [
        {
          "internalType": "contract Govern",
          "name": "govern",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4509397",
    "logsBloom": "0x
    "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9",
    "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0xc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091",
          "0x586df60400000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000091bb90d7d53de1b8c3c1737f7f242b78e5f28f0",
          "0x0000000000000000000000001fd4767f09b6bf4e39791d57c8b97b9445f064a4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 0,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0xd99e39303be7c43f3cd7f2d4f6aa487d2867be2d071eed6a8d4a888742b0fa85"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0xc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091",
          "0xc2d85afc00000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000091bb90d7d53de1b8c3c1737f7f242b78e5f28f0",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 2,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0xc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091",
          "0xa43e253300000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000091bb90d7d53de1b8c3c1737f7f242b78e5f28f0",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 3,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0xbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca"
        ],
        "data": "0xc2d85afc00000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3cdd6e5dda40ede15b6c4e3251e06d7c7ca294f649795abc78d06bcbb4cdb420",
        "address": "0x1fd4767f09b6bF4E39791D57C8b97B9445f064a4",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0x41797af77056645da69babde55fa103f1213e7f7b36c681fe7a2d22901b5a776"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xbd5e8ce8e711b0973ca707d716afc121e20c23a078dd81e7b4dd7fdbfa4feba9"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "4509397",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ab40b143b50742d171e87e19303a80b3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3000\",\"name\":\"_initialExecutor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"newGovern\",\"outputs\":[{\"internalType\":\"contract Govern\",\"name\":\"govern\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/core-factories/GovernFactory.sol\":\"GovernFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../initializable/Initializable.sol\\\";\\n\\nimport \\\"./IACLOracle.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes4 role;\\n        address who;\\n    }\\n}\\n\\ncontract ACL is Initializable {\\n    bytes4 public constant ROOT_ROLE =\\n        this.grant.selector\\n        ^ this.revoke.selector\\n        ^ this.freeze.selector\\n        ^ this.bulk.selector\\n    ;\\n\\n    address internal constant FREEZE_FLAG = address(1);\\n    address internal constant ANY_ADDR = address(-1);\\n\\n    address internal constant UNSET_ROLE = address(0);\\n    address internal constant ALLOW_FLAG = address(2);\\n    \\n    mapping (bytes4 => mapping (address => address)) public roles;\\n\\n    event Granted(bytes4 indexed role, address indexed actor, address indexed who, IACLOracle oracle);\\n    event Revoked(bytes4 indexed role, address indexed actor, address indexed who);\\n    event Frozen(bytes4 indexed role, address indexed actor);\\n\\n    modifier auth(bytes4 _role) {\\n        require(willPerform(_role, msg.sender, msg.data), \\\"acl: auth\\\");\\n        _;\\n    }\\n\\n    modifier initACL(address _initialRoot) {\\n        // ACL might have been already initialized by constructors\\n        if (initBlocks[\\\"acl\\\"] == 0) {\\n            _initializeACL(_initialRoot);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _initialRoot) public initACL(_initialRoot) { }\\n\\n    function _initializeACL(address _initialRoot) internal onlyInit(\\\"acl\\\") {\\n        _grant(ROOT_ROLE, _initialRoot);\\n    }\\n\\n    function grant(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _grant(_role, _who);\\n    }\\n\\n    function grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) external auth(ROOT_ROLE) {\\n        _grantWithOracle(_role, _who, _oracle);\\n    }\\n\\n    function revoke(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _revoke(_role, _who);\\n    }\\n\\n    function freeze(bytes4 _role) external auth(ROOT_ROLE) {\\n        _freeze(_role);\\n    }\\n\\n    function bulk(ACLData.BulkItem[] memory items) public auth(ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(item.role);\\n        }\\n    }\\n\\n    function willPerform(bytes4 _role, address _sender, bytes memory _data) public returns (bool) {\\n        address senderRole = roles[_role][msg.sender];\\n        if (senderRole != UNSET_ROLE) {\\n            if (senderRole == ALLOW_FLAG) return true;\\n            if (IACLOracle(senderRole).willPerform(_role, _sender, _data)) return true;\\n        }\\n\\n        address anyRole = roles[_role][ANY_ADDR];\\n        if (anyRole != UNSET_ROLE) {\\n            if (anyRole == ALLOW_FLAG) return true;\\n            if (IACLOracle(anyRole).willPerform(_role, _sender, _data)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _grant(bytes4 _role, address _who) internal {\\n        _grantWithOracle(_role, _who, IACLOracle(ALLOW_FLAG));\\n    }\\n\\n    function _grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n        require(_who != FREEZE_FLAG, \\\"acl: bad freeze\\\");\\n        \\n        roles[_role][_who] = address(_oracle);\\n        emit Granted(_role, msg.sender, _who, _oracle);\\n    }\\n\\n    function _revoke(bytes4 _role, address _who) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][_who] = UNSET_ROLE;\\n        emit Revoked(_role, msg.sender, _who);\\n    }\\n\\n    function _freeze(bytes4 _role) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][FREEZE_FLAG] = FREEZE_FLAG;\\n\\n        emit Frozen(_role, msg.sender);\\n    }\\n\\n    function isFrozen(bytes4 _role) public view returns (bool) {\\n        return roles[_role][FREEZE_FLAG] == FREEZE_FLAG;\\n    }\\n}\",\"keccak256\":\"0xfc3130638c04860e1006ccc2a765c36f22a3eadb2f095098f49d37ed26c073cc\",\"license\":\"GPL-3.0\"},\"@aragon/govern-contract-utils/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.6.8;\\n\\ninterface IACLOracle {\\n    function willPerform(bytes4 role, address who, bytes calldata data) external returns (bool allowed);\\n}\",\"keccak256\":\"0x978bedb926117b472212ea90debf71b4274bf1e1e673f541247cc01c93b55062\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../erc165/ERC165.sol\\\";\\n\\ncontract AdaptativeERC165 is ERC165 {\\n    // erc165 interface ID -> whether it is supported\\n    mapping (bytes4 => bool) internal standardSupported;\\n    // callback function signature -> magic number to return\\n    mapping (bytes4 => bytes32) internal callbackMagicNumbers;\\n\\n    bytes32 internal constant UNREGISTERED_CALLBACK = bytes32(0);\\n\\n    event RegisteredStandard(bytes4 interfaceId);\\n    event RegisteredCallback(bytes4 sig, bytes4 magicNumber);\\n    event ReceivedCallback(bytes4 indexed sig, bytes data);\\n\\n    function supportsInterface(bytes4 _interfaceId) override virtual public view returns (bool) {\\n        return standardSupported[_interfaceId] || super.supportsInterface(_interfaceId);\\n    }\\n\\n    function _handleCallback(bytes4 _sig, bytes memory _data) internal {\\n        bytes32 magicNumber = callbackMagicNumbers[_sig];\\n        require(magicNumber != UNREGISTERED_CALLBACK, \\\"adap-erc165: unknown callback\\\");\\n\\n        emit ReceivedCallback(_sig, _data);\\n\\n        // low-level return magic number\\n        assembly {\\n            mstore(0x00, magicNumber)\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    function _registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        _registerStandard(_interfaceId);\\n        _registerCallback(_callbackSig, _magicNumber);\\n    }\\n\\n    function _registerStandard(bytes4 _interfaceId) internal {\\n        // use a random magic number for standards without number\\n        standardSupported[_interfaceId] = true;\\n\\n        emit RegisteredStandard(_interfaceId);\\n    }\\n\\n    function _registerCallback(bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        callbackMagicNumbers[_callbackSig] = _magicNumber;\\n\\n        emit RegisteredCallback(_callbackSig, _magicNumber);\\n    }\\n}\",\"keccak256\":\"0x38499e059897298638ffbcdd3d191c4f345e0a2537fd70d3cd17d47758b4cca2\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/address-utils/AddressUtils.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nlibrary AddressUtils {\\n    function toPayable(address addr) internal pure returns (address payable) {\\n        return address(bytes20(addr));\\n    }\\n\\n    function toAddress(address addr) internal pure returns (address payable) {\\n        return address(bytes20(addr));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool result) {\\n        assembly {\\n            result := not(iszero(extcodesize(addr)))\\n        }\\n    }\\n}\",\"keccak256\":\"0x64afde65cee1947a6b5a53730e0c42c71d6042e461b0f39d5713c7f6771757f2\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/bitmaps/BitmapLib.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nlibrary BitmapLib {\\n    bytes32 constant internal empty = bytes32(0);\\n    bytes32 constant internal allowAll = empty;\\n    bytes32 constant internal denyAll = bytes32(uint256(-1));\\n\\n    function flip(bytes32 map, uint8 index) internal pure returns (bytes32) {\\n        return bytes32(uint256(map) ^ uint256(1) << index);\\n    }\\n\\n    function get(bytes32 map, uint8 index) internal pure returns (bool) {\\n        return bool(uint256(map) >> index & 1 == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xb4d5bb80d9fdbbc3010d261d6431d99c8532423098bc15b582670f87efc80734\",\"license\":\"GPL-3.0\"},\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nabstract contract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) virtual public view returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID\\n          || block.timestamp == 1; // silence visibility warning needed for overrides\\n    }\\n}\",\"keccak256\":\"0x48bc84112e6ba3faee6e57081d97284338bda87af97e1353a957701b8059c80d\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/initializable/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.6.8;\\n\\ncontract Initializable {\\n    mapping (string => uint256) public initBlocks;\\n\\n    event Initialized(string indexed key);\\n\\n    modifier onlyInit(string memory key) {\\n        require(initBlocks[key] == 0, \\\"initializable: already initialized\\\");\\n        initBlocks[key] = block.number;\\n        _;\\n        emit Initialized(key);\\n    }\\n}\",\"keccak256\":\"0xebf2390cfe1c1d57fa3d2dae190a56db50d03fdd6732f8aef233a34581f5760b\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/minimal-proxies/ERC1167ProxyFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// Inspired by: https://github.com/optionality/clone-factory\\n\\npragma solidity ^0.6.8;\\n\\nlibrary ERC1167ProxyFactory {\\n    function clone(address _implementation) internal returns (address cloneAddr) {\\n        bytes memory code = generateCode(_implementation);\\n\\n        assembly {\\n            cloneAddr := create(0, add(code, 0x20), 55)\\n        }\\n        \\n        require(cloneAddr != address(0), \\\"proxy-factory: bad create\\\");\\n    }\\n\\n    function clone(address _implementation, bytes memory _initData) internal returns (address cloneAddr) {\\n        cloneAddr = clone(_implementation);\\n        (bool ok, bytes memory ret) = cloneAddr.call(_initData);\\n\\n        require(ok, _getRevertMsg(ret));\\n    }\\n\\n    function clone2(address _implementation, bytes32 _salt) internal returns (address cloneAddr) {\\n        bytes memory code = generateCode(_implementation);\\n        \\n        assembly {\\n            cloneAddr := create2(0, add(code, 0x20), 55, _salt)\\n        }\\n        \\n        require(cloneAddr != address(0), \\\"proxy-factory: bad create2\\\");\\n    }\\n\\n    function clone2(address _implementation, bytes32 _salt, bytes memory _initData) internal returns (address cloneAddr) {\\n        cloneAddr = clone2(_implementation, _salt);\\n        (bool ok, bytes memory ret) = cloneAddr.call(_initData);\\n\\n        require(ok, _getRevertMsg(ret));\\n    }\\n\\n    function generateCode(address _implementation) internal pure returns (bytes memory code) {\\n        code = new bytes(55);\\n        \\n        assembly {\\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(code, 0x34), shl(0x60, _implementation))\\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n        }\\n    }\\n\\n    // From: https://ethereum.stackexchange.com/a/83577\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return '';\\n\\n        assembly {\\n            _returnData := add(_returnData, 0x04) // Slice the sighash.\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n}\\n\",\"keccak256\":\"0x2c92620c6ebd44fe19cad226d25f53c4c05be0c680249ec1b01832f7715e7dd9\",\"license\":\"MIT\"},\"@aragon/govern-core/contracts/Govern.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"erc3k/contracts/IERC3000Executor.sol\\\";\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/bitmaps/BitmapLib.sol\\\";\\n\\ncontract Govern is AdaptativeERC165, IERC3000Executor, ACL {\\n    using BitmapLib for bytes32;\\n\\n    bytes4 internal constant EXEC_ROLE = this.exec.selector;\\n    bytes4 internal constant REGISTER_ROLE = this.registerStandardAndCallback.selector;\\n    uint256 internal constant MAX_ACTIONS = 256;\\n\\n    event ETHDeposited(address indexed sender, uint256 value);\\n\\n    constructor(address _initialExecutor) ACL(address(this)) public {\\n        initialize(_initialExecutor);\\n    }\\n\\n    function initialize(address _initialExecutor) public initACL(_initialExecutor) onlyInit(\\\"govern\\\") {\\n        _grant(EXEC_ROLE, address(_initialExecutor));\\n        _grant(REGISTER_ROLE, address(_initialExecutor));\\n        _registerStandard(ERC3000_EXEC_INTERFACE_ID);\\n    }\\n\\n    receive () external payable {\\n        emit ETHDeposited(msg.sender, msg.value);\\n    }\\n\\n    fallback () external {\\n        _handleCallback(msg.sig, msg.data); // WARN: does a low-level return, any code below would be unreacheable\\n    }\\n\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) override public auth(EXEC_ROLE) returns (bytes32, bytes[] memory) {\\n        require(actions.length <= MAX_ACTIONS, \\\"govern: too many\\\"); // need to limit since we use 256-bit bitmaps\\n        \\n        bytes[] memory execResults = new bytes[](actions.length);\\n        bytes32 failureMap = BitmapLib.empty; // start with an empty bitmap\\n\\n        for (uint256 i = 0; i < actions.length; i++) { // can use uint8 given the action limit\\n            // TODO: optimize with assembly\\n            (bool ok, bytes memory ret) = actions[i].to.call{value: actions[i].value}(actions[i].data);\\n            require(ok || allowFailuresMap.get(uint8(i)), \\\"govern: call\\\");\\n            // if a call fails, flip that bit to signal failure\\n            failureMap = ok ? failureMap : failureMap.flip(uint8(i));\\n            execResults[i] = ret;\\n        }\\n\\n        emit Executed(msg.sender, actions, memo, failureMap, execResults);\\n\\n        return (failureMap, execResults);\\n    }\\n\\n    function registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) external auth(REGISTER_ROLE) {\\n        _registerStandardAndCallback(_interfaceId, _callbackSig, _magicNumber);\\n    }\\n\\n    // TODO: ERC-1271\\n}\\n\",\"keccak256\":\"0x9d015f4a86ca595d17accfd2bc503b6f6151344f260062226ae596d696f470ef\",\"license\":\"GPL-3.0\"},\"contracts/core-factories/GovernFactory.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\nimport \\\"@aragon/govern-core/contracts/Govern.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/minimal-proxies/ERC1167ProxyFactory.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/address-utils/AddressUtils.sol\\\";\\n\\ncontract GovernFactory {\\n    using ERC1167ProxyFactory for address;\\n    using AddressUtils for address;\\n    \\n    address public base;\\n\\n    constructor() public {\\n        setupBase();\\n    }\\n\\n    function newGovern(IERC3000 _initialExecutor, bytes32 _salt) public returns (Govern govern) {\\n        if (_salt != bytes32(0)) {\\n            return Govern(base.clone2(_salt, abi.encodeWithSelector(govern.initialize.selector, _initialExecutor)).toPayable());\\n        } else {\\n            return new Govern(address(_initialExecutor));\\n        }\\n    }\\n\\n    function setupBase() private {\\n        base = address(new Govern(address(2)));\\n    }\\n}\\n\",\"keccak256\":\"0x4362cbf84ea0899e0bd269b719093c96c9153b79df73479ca798a222915bf552\",\"license\":\"GPL-3.0\"},\"erc3k/contracts/ERC3000Data.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC3000Executor.sol\\\";\\n\\nlibrary ERC3000Data {\\n    // TODO: come up with a non-shitty name\\n    struct Container {\\n        Payload payload;\\n        Config config;\\n    }\\n\\n    // WARN: Always remember to change the 'hash' function if modifying the struct\\n    struct Payload {\\n        uint256 nonce;\\n        uint256 executionTime;\\n        address submitter;\\n        IERC3000Executor executor;\\n        Action[] actions;\\n        bytes32 allowFailuresMap;\\n        bytes proof;\\n    }\\n\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct Config {\\n        uint256 executionDelay;\\n        Collateral scheduleDeposit;\\n        Collateral challengeDeposit;\\n        address resolver;\\n        bytes rules;\\n    }\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function containerHash(bytes32 payloadHash, bytes32 configHash) internal view returns (bytes32) {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        return keccak256(abi.encodePacked(\\\"erc3k-v1\\\", address(this), chainId, payloadHash, configHash));\\n    }\\n\\n    function hash(Container memory container) internal view returns (bytes32) {\\n        return containerHash(hash(container.payload), hash(container.config));\\n    }\\n\\n    function hash(Payload memory payload) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(\\n                payload.nonce,\\n                payload.executionTime,\\n                payload.submitter,\\n                payload.executor,\\n                keccak256(abi.encode(payload.actions)),\\n                payload.allowFailuresMap,\\n                keccak256(payload.proof)\\n            )\\n        );\\n    }\\n\\n    function hash(Config memory config) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(config));\\n    }\\n}\\n\",\"keccak256\":\"0x361ff1535d9950c8140bc71ec5102018bf2c14d7d33fef965ccea0656866bab5\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\ncontract ERC3000Interface {\\n    bytes4 internal constant ERC3000_INTERFACE_ID =\\n        IERC3000(0).schedule.selector\\n        ^ IERC3000(0).execute.selector\\n        ^ IERC3000(0).challenge.selector\\n        ^ IERC3000(0).resolve.selector\\n        ^ IERC3000(0).veto.selector\\n        ^ IERC3000(0).configure.selector\\n    ;\\n}\\n\\nabstract contract IERC3000 is ERC3000Interface {\\n    /**\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window\\n     * @param container A Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @return containerHash\\n     */\\n    function schedule(ERC3000Data.Container memory container) virtual public returns (bytes32 containerHash);\\n    event Scheduled(bytes32 indexed containerHash, ERC3000Data.Payload payload);\\n\\n    /**\\n     * @notice Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\\n     * @param container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * MUST be an ERC3000Executor call: payload.executor.exec(payload.actions)\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function execute(ERC3000Data.Container memory container) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(bytes32 indexed containerHash, address indexed actor);\\n\\n    /**\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param reason Hint for case reviewers as to why the scheduled container is illegal\\n     * @return resolverId\\n     */\\n    function challenge(ERC3000Data.Container memory container, bytes memory reason) virtual public returns (uint256 resolverId);\\n    event Challenged(bytes32 indexed containerHash, address indexed actor, bytes reason, uint256 resolverId, ERC3000Data.Collateral collateral);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param resolverId disputeId in the arbitrator in which the dispute over the container was created\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function resolve(ERC3000Data.Container memory container, uint256 resolverId) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Resolved(bytes32 indexed containerHash, address indexed actor, bool approved);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param containerHash Hash of the container being vetoed\\n     * @param reason Justification for the veto\\n     */\\n    function veto(bytes32 containerHash, bytes memory reason) virtual public;\\n    event Vetoed(bytes32 indexed containerHash, address indexed actor, bytes reason);\\n\\n    /**\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\n     * @param config A ERC3000Data.Config struct holding all the new params that will control the system\\n     * @return configHash\\n     */\\n    function configure(ERC3000Data.Config memory config) virtual public returns (bytes32 configHash);\\n    event Configured(bytes32 indexed containerHash, address indexed actor, ERC3000Data.Config config);\\n}\\n\",\"keccak256\":\"0x274bc6206afff001e43f8c51ecddc1af5f6576cb0cf8738669211e7a384398b2\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000Executor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\nabstract contract IERC3000Executor {\\n    bytes4 internal constant ERC3000_EXEC_INTERFACE_ID = this.exec.selector;\\n\\n    /**\\n     * @notice Executes all given actions\\n     * @param actions A array of ERC3000Data.Action for later executing those\\n     * @param allowFailuresMap A map with the allowed failures\\n     * @param memo The hash of the ERC3000Data.Container\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(address indexed actor, ERC3000Data.Action[] actions, bytes32 memo, bytes32 failureMap, bytes[] execResults);\\n}\\n\",\"keccak256\":\"0x568a412f560f477d831f5bc0bec927045686eea66a3a797c3f6784c7acefbf74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100226001600160e01b0361002716565b610092565b600260405161003590610085565b6001600160a01b03909116815260405190819003602001906000f080158015610062573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b61267880612cf883390190565b612c57806100a16000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635001f3b51461003b578063ad921bf41461006c575b600080fd5b6100436100a5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100436004803603604081101561008257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356100c1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008115610185576040805173ffffffffffffffffffffffffffffffffffffffff8086166024808401919091528351808403909101815260449092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de80000000000000000000000000000000000000000000000000000000017905260005461017e9261016392911690859063ffffffff6101d616565b73ffffffffffffffffffffffffffffffffffffffff16610370565b90506101d0565b826040516101929061059b565b73ffffffffffffffffffffffffffffffffffffffff909116815260405190819003602001906000f0801580156101cc573d6000803e3d6000fd5b5090505b92915050565b60006101e2848461038d565b9050600060608273ffffffffffffffffffffffffffffffffffffffff16846040518082805190602001908083835b6020831061024d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610210565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146102af576040519150601f19603f3d011682016040523d82523d6000602084013e6102b4565b606091505b5091509150816102c382610431565b90610366576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561032b578181015183820152602001610313565b50505050905090810190601f1680156103585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff81165b919050565b6000606061039a84610523565b9050826037602083016000f5915073ffffffffffffffffffffffffffffffffffffffff821661042a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f70726f78792d666163746f72793a206261642063726561746532000000000000604482015290519081900360640190fd5b5092915050565b60606044825110156104525750604080516020810190915260008152610388565b600482018051909260240190602081101561046c57600080fd5b810190808051604051939291908464010000000082111561048c57600080fd5b9083019060208201858111156104a157600080fd5b82516401000000008111828201881017156104bb57600080fd5b82525081516020918201929091019080838360005b838110156104e85781810151838201526020016104d0565b50505050905090810190601f1680156105155780820380516001836020036101000a031916815260200191505b506040525050509050919050565b604080516037808252606082810190935260208201818036833750507f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000060208301525060609290921b6034830152507f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000604882015290565b61267880620005aa8339019056fe60806040523480156200001157600080fd5b50604051620026783803806200267883398101604081905262000034916200044c565b308060026040516200004690620004b8565b90815260200160405180910390205460001415620000725762000072816001600160e01b036200009016565b50620000899050816001600160e01b036200016a16565b5062000580565b604051806040016040528060038152602001621858db60ea1b815250600281604051620000be91906200047c565b908152602001604051809103902054600014620000f85760405162461bcd60e51b8152600401620000ef9062000515565b60405180910390fd5b436002826040516200010b91906200047c565b908152604051908190036020019020556200013763161b7d8160e21b836001600160e01b03620002b316565b806040516200014791906200047c565b604051908190038120906000805160206200265883398151915290600090a25050565b8060026040516200017b90620004b8565b90815260200160405180910390205460001415620001a757620001a7816001600160e01b036200009016565b6040518060400160405280600681526020016533b7bb32b93760d11b815250600281604051620001d891906200047c565b908152602001604051809103902054600014620002095760405162461bcd60e51b8152600401620000ef9062000515565b436002826040516200021c91906200047c565b90815260405190819003602001902055620002486330b616bf60e21b846001600160e01b03620002b316565b6200026463a43e253360e01b846001600160e01b03620002b316565b6200027f6330b616bf60e21b6001600160e01b03620002ce16565b806040516200028f91906200047c565b604051908190038120906000805160206200265883398151915290600090a2505050565b620002ca828260026001600160e01b036200032f16565b5050565b6001600160e01b0319811660009081526020819052604090819020805460ff19166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9062000324908390620004c7565b60405180910390a150565b62000343836001600160e01b036200041916565b15620003635760405162461bcd60e51b8152600401620000ef90620004f0565b6001600160a01b03821660011415620003905760405162461bcd60e51b8152600401620000ef9062000557565b6001600160e01b0319831660008181526003602090815260408083206001600160a01b03878116808652919093529281902080546001600160a01b0319169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091906200040c908690620004dc565b60405180910390a4505050565b6001600160e01b031916600090815260036020908152604080832060018085529252909120546001600160a01b03161490565b6000602082840312156200045e578081fd5b81516001600160a01b038116811462000475578182fd5b9392505050565b60008251815b818110156200049e576020818601810151858301520162000482565b81811115620004ad5782828501525b509190910192915050565b621858db60ea1b815260030190565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b6020808252600b908201526a30b1b61d10333937bd32b760a91b604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a604082015261195960f21b606082015260800190565b6020808252600f908201526e61636c3a2062616420667265657a6560881b604082015260600190565b6120c880620005906000396000f3fe6080604052600436106100e15760003560e01c8063a157a10d1161007f578063bdf9a72611610059578063bdf9a7261461030f578063c2d85afc1461032f578063c4d66de81461035d578063cc1d4cab1461037d57610136565b8063a157a10d146102af578063a2157227146102cf578063a43e2533146102ef57610136565b8063495a9825116100bb578063495a98251461022057806358849734146102405780637e8c7f081461026057806396fc8abd1461028257610136565b806301ffc9a7146101aa578063097c8108146101e05780631c47671b1461020057610136565b36610136573373ffffffffffffffffffffffffffffffffffffffff167f6c703791f399558807424f489ccd811c72b4ff0b74af547264fad7c646776df03460405161012c9190611fb6565b60405180910390a2005b34801561014257600080fd5b506101a86000357fffffffff00000000000000000000000000000000000000000000000000000000166000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103aa92505050565b005b3480156101b657600080fd5b506101ca6101c53660046119c1565b61047d565b6040516101d79190611d18565b60405180910390f35b3480156101ec57600080fd5b506101ca6101fb366004611a15565b6104c7565b34801561020c57600080fd5b506101a861021b3660046118c2565b610749565b34801561022c57600080fd5b506101ca61023b3660046119c1565b61089a565b34801561024c57600080fd5b506101a861025b3660046119dd565b6108f2565b34801561026c57600080fd5b50610275610995565b6040516101d79190611d3c565b34801561028e57600080fd5b506102a261029d3660046119dd565b6109b9565b6040516101d79190611c21565b3480156102bb57600080fd5b506101a86102ca3660046119dd565b6109ec565b3480156102db57600080fd5b506101a86102ea366004611a75565b610a8f565b3480156102fb57600080fd5b506101a861030a366004611abf565b610b39565b34801561031b57600080fd5b506101a861032a3660046119c1565b610bc4565b34801561033b57600080fd5b5061034f61034a3660046117ad565b610c6a565b6040516101d7929190611d23565b34801561036957600080fd5b506101a8610378366004611791565b610f2d565b34801561038957600080fd5b5061039d610398366004611b04565b6110cb565b6040516101d79190611fb6565b7fffffffff0000000000000000000000000000000000000000000000000000000082166000908152600160205260409020548061041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e7d565b60405180910390fd5b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f2fdd9b4034d8eef4c469308919f66095e03b482447321a73e21479292fba6d378360405161046b9190611dfc565b60405180910390a28060005260206000f35b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604081205460ff16806104c157506104c1826110e8565b92915050565b7fffffffff000000000000000000000000000000000000000000000000000000008316600090815260036020908152604080832033845290915281205473ffffffffffffffffffffffffffffffffffffffff1680156106005773ffffffffffffffffffffffffffffffffffffffff811660021415610549576001915050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c81089061059f90889088908890600401611d69565b602060405180830381600087803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f191906119a1565b15610600576001915050610742565b7fffffffff000000000000000000000000000000000000000000000000000000008516600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff80855292529091205416801561073b5773ffffffffffffffffffffffffffffffffffffffff81166002141561068357600192505050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c8108906106d990899089908990600401611d69565b602060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b91906119a1565b1561073b57600192505050610742565b6000925050505b9392505050565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926107ac9284923392600091819084018382808284376000920191909152506104c792505050565b6107e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b60005b8251811015610895576107f66116ad565b83828151811061080257fe5b602002602001015190506000600281111561081957fe5b8151600281111561082657fe5b14156108435761083e8160200151826040015161113f565b61088c565b60018151600281111561085257fe5b141561086a5761083e8160200151826040015161114b565b60028151600281111561087957fe5b141561088c5761088c8160200151611233565b506001016107e5565b505050565b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360209081526040808320600180855292529091205473ffffffffffffffffffffffffffffffffffffffff161490565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926109559284923392600091819084018382808284376000920191909152506104c792505050565b61098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361114b565b7f586df6040000000000000000000000000000000000000000000000000000000081565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610a4f9284923392600091819084018382808284376000920191909152506104c792505050565b610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361113f565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610af29284923392600091819084018382808284376000920191909152506104c792505050565b610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b33848484611305565b50505050565b63a43e253360e01b610b8381336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b3384848461145a565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610c279284923392600091819084018382808284376000920191909152506104c792505050565b610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610c6682611233565b5050565b6000606063c2d85afc60e01b610cb881336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b61010086511115610d2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f48565b6060865167ffffffffffffffff81118015610d4557600080fd5b50604051908082528060200260200182016040528015610d7957816020015b6060815260200190600190039081610d645790505b5090506000805b8851811015610ecc57600060608a8381518110610d9957fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168b8481518110610dc757fe5b6020026020010151602001518c8581518110610ddf57fe5b602002602001015160400151604051610df89190611bdc565b60006040518083038185875af1925050503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b50915091508180610e565750610e568a8463ffffffff61146d16565b610e8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f11565b81610ea657610ea1848463ffffffff61147a16565b610ea8565b835b935080858481518110610eb757fe5b60209081029190910101525050600101610d80565b503373ffffffffffffffffffffffffffffffffffffffff167f589db18161c9dc190c7fc0cc0c319eeb589c1ba890be60089f1ee76b4bfb01ea89888486604051610f199493929190611c42565b60405180910390a297909650945050505050565b806002604051610f3c90611bf8565b90815260200160405180910390205460001415610f5c57610f5c81611487565b6040518060400160405280600681526020017f676f7665726e0000000000000000000000000000000000000000000000000000815250600281604051610fa29190611bdc565b908152602001604051809103902054600014610fea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b43600282604051610ffb9190611bdc565b908152604051908190036020019020556110357fc2d85afc000000000000000000000000000000000000000000000000000000008461113f565b61105f7fa43e2533000000000000000000000000000000000000000000000000000000008461113f565b6110887fc2d85afc000000000000000000000000000000000000000000000000000000006115a2565b806040516110969190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a2505050565b805160208183018101805160028252928201919093012091525481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806104c157505060014214919050565b610c6682826002611305565b6111548261089a565b1561118b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff000000000000000000000000000000000000000000000000000000008216600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055519092339290917f682f2c466c1e9f6883eb72cbced01373e1cb18b05ae5c8bc04dc73d73e29f8cd9190a45050565b61123c8161089a565b15611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff00000000000000000000000000000000000000000000000000000000811660008181526003602090815260408083206001808552925280832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155513392917f049c6b8b07a879425742523fa80f8ffb25e39ad518c93a5896a0df19518397e591a350565b61130e8361089a565b15611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b73ffffffffffffffffffffffffffffffffffffffff821660011415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f7f565b7fffffffff000000000000000000000000000000000000000000000000000000008316600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff878116808652919093529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e70919061144d908690611c21565b60405180910390a4505050565b611463836115a2565b6108958282611637565b60ff161c60019081161490565b600160ff919091161b1890565b6040518060400160405280600381526020017f61636c00000000000000000000000000000000000000000000000000000000008152506002816040516114cd9190611bdc565b908152602001604051809103902054600014611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b436002826040516115269190611bdc565b908152604051908190036020019020556115607f586df604000000000000000000000000000000000000000000000000000000008361113f565b8060405161156e9190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a25050565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9061162c908390611d3c565b60405180910390a150565b7fffffffff0000000000000000000000000000000000000000000000000000000082811660009081526001602052604090819020918316909155517f93d5961296b43c7ce4028f69e1b1469851106225a65d1a7f87fe48edf7f100d8906116a19084908490611dc9565b60405180910390a15050565b6040805160608101909152806000815260006020820181905260409091015290565b80356104c181612032565b80357fffffffff00000000000000000000000000000000000000000000000000000000811681146104c157600080fd5b600082601f83011261171a578081fd5b813567ffffffffffffffff811115611730578182fd5b61176160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611fbf565b915080825283602082850101111561177857600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156117a2578081fd5b813561074281612032565b6000806000606084860312156117c1578182fd5b67ffffffffffffffff80853511156117d7578283fd5b8435850186601f8201126117e9578384fd5b80356117fc6117f782611fe6565b611fbf565b818152602080820191908401875b848110156118a6578135860160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f0301121561184757898afd5b6118516060611fbf565b61185e8e602084016116cf565b81526040820135602082015260608201358981111561187b578b8cfd5b61188a8f60208386010161170a565b604083015250855250602093840193919091019060010161180a565b50909a60208a01359a5060409099013598975050505050505050565b600060208083850312156118d4578182fd5b823567ffffffffffffffff8111156118ea578283fd5b80840185601f8201126118fb578384fd5b8035915061190b6117f783611fe6565b828152838101908285016060808602850187018a1015611929578788fd5b8794505b858510156119935780828b031215611943578788fd5b61194c81611fbf565b823561195781612085565b81528288013561196681612057565b8189015260408381013561197981612032565b90820152845260019490940193928601929081019061192d565b509098975050505050505050565b6000602082840312156119b2578081fd5b81518015158114610742578182fd5b6000602082840312156119d2578081fd5b813561074281612057565b600080604083850312156119ef578182fd5b82356119fa81612057565b91506020830135611a0a81612032565b809150509250929050565b600080600060608486031215611a29578283fd5b8335611a3481612057565b92506020840135611a4481612032565b9150604084013567ffffffffffffffff811115611a5f578182fd5b611a6b8682870161170a565b9150509250925092565b600080600060608486031215611a89578283fd5b8335611a9481612057565b92506020840135611aa481612032565b91506040840135611ab481612032565b809150509250925092565b600080600060608486031215611ad3578283fd5b611add85856116da565b9250611aec85602086016116da565b9150611afb85604086016116da565b90509250925092565b600060208284031215611b15578081fd5b813567ffffffffffffffff811115611b2b578182fd5b611b378482850161170a565b949350505050565b6000815180845260208085018081965082840281019150828601855b85811015611b85578284038952611b73848351611b92565b98850198935090840190600101611b5b565b5091979650505050505050565b60008151808452611baa816020860160208601612006565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611bee818460208701612006565b9190910192915050565b7f61636c0000000000000000000000000000000000000000000000000000000000815260030190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000608082016080835280875180835260a0850191506020925060a0838202860101838a01855b83811015611ceb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608884030185528151606073ffffffffffffffffffffffffffffffffffffffff825116855287820151888601526040808301518282880152611cd583880182611b92565b988a019896505050928701925050600101611c69565b505088848701528760408701528581036060870152611d0a8188611b3f565b9a9950505050505050505050565b901515815260200190565b600083825260406020830152611b376040830184611b3f565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60007fffffffff000000000000000000000000000000000000000000000000000000008516825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152611dc06060830184611b92565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000092831681529116602082015260400190565b6000602082526107426020830184611b92565b60208082526009908201527f61636c3a20617574680000000000000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f61636c3a2066726f7a656e000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f616461702d6572633136353a20756e6b6e6f776e2063616c6c6261636b000000604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a60408201527f6564000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f676f7665726e3a2063616c6c0000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f676f7665726e3a20746f6f206d616e7900000000000000000000000000000000604082015260600190565b6020808252600f908201527f61636c3a2062616420667265657a650000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611fde57600080fd5b604052919050565b600067ffffffffffffffff821115611ffc578081fd5b5060209081020190565b60005b83811015612021578181015183820152602001612009565b83811115610b335750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461205457600080fd5b50565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461205457600080fd5b6003811061205457600080fdfea26469706673582212205a3e3f2f43011ec7816e701e191027dc3a09faf9e637985b08e15e047c43953e64736f6c634300060800337bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2a264697066735822122098c9825139b60d8a48a8388b3aae94da3cc4e3a46f9b203772ef3cbdba6fef1964736f6c6343000608003360806040523480156200001157600080fd5b50604051620026783803806200267883398101604081905262000034916200044c565b308060026040516200004690620004b8565b90815260200160405180910390205460001415620000725762000072816001600160e01b036200009016565b50620000899050816001600160e01b036200016a16565b5062000580565b604051806040016040528060038152602001621858db60ea1b815250600281604051620000be91906200047c565b908152602001604051809103902054600014620000f85760405162461bcd60e51b8152600401620000ef9062000515565b60405180910390fd5b436002826040516200010b91906200047c565b908152604051908190036020019020556200013763161b7d8160e21b836001600160e01b03620002b316565b806040516200014791906200047c565b604051908190038120906000805160206200265883398151915290600090a25050565b8060026040516200017b90620004b8565b90815260200160405180910390205460001415620001a757620001a7816001600160e01b036200009016565b6040518060400160405280600681526020016533b7bb32b93760d11b815250600281604051620001d891906200047c565b908152602001604051809103902054600014620002095760405162461bcd60e51b8152600401620000ef9062000515565b436002826040516200021c91906200047c565b90815260405190819003602001902055620002486330b616bf60e21b846001600160e01b03620002b316565b6200026463a43e253360e01b846001600160e01b03620002b316565b6200027f6330b616bf60e21b6001600160e01b03620002ce16565b806040516200028f91906200047c565b604051908190038120906000805160206200265883398151915290600090a2505050565b620002ca828260026001600160e01b036200032f16565b5050565b6001600160e01b0319811660009081526020819052604090819020805460ff19166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9062000324908390620004c7565b60405180910390a150565b62000343836001600160e01b036200041916565b15620003635760405162461bcd60e51b8152600401620000ef90620004f0565b6001600160a01b03821660011415620003905760405162461bcd60e51b8152600401620000ef9062000557565b6001600160e01b0319831660008181526003602090815260408083206001600160a01b03878116808652919093529281902080546001600160a01b0319169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091906200040c908690620004dc565b60405180910390a4505050565b6001600160e01b031916600090815260036020908152604080832060018085529252909120546001600160a01b03161490565b6000602082840312156200045e578081fd5b81516001600160a01b038116811462000475578182fd5b9392505050565b60008251815b818110156200049e576020818601810151858301520162000482565b81811115620004ad5782828501525b509190910192915050565b621858db60ea1b815260030190565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b6020808252600b908201526a30b1b61d10333937bd32b760a91b604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a604082015261195960f21b606082015260800190565b6020808252600f908201526e61636c3a2062616420667265657a6560881b604082015260600190565b6120c880620005906000396000f3fe6080604052600436106100e15760003560e01c8063a157a10d1161007f578063bdf9a72611610059578063bdf9a7261461030f578063c2d85afc1461032f578063c4d66de81461035d578063cc1d4cab1461037d57610136565b8063a157a10d146102af578063a2157227146102cf578063a43e2533146102ef57610136565b8063495a9825116100bb578063495a98251461022057806358849734146102405780637e8c7f081461026057806396fc8abd1461028257610136565b806301ffc9a7146101aa578063097c8108146101e05780631c47671b1461020057610136565b36610136573373ffffffffffffffffffffffffffffffffffffffff167f6c703791f399558807424f489ccd811c72b4ff0b74af547264fad7c646776df03460405161012c9190611fb6565b60405180910390a2005b34801561014257600080fd5b506101a86000357fffffffff00000000000000000000000000000000000000000000000000000000166000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103aa92505050565b005b3480156101b657600080fd5b506101ca6101c53660046119c1565b61047d565b6040516101d79190611d18565b60405180910390f35b3480156101ec57600080fd5b506101ca6101fb366004611a15565b6104c7565b34801561020c57600080fd5b506101a861021b3660046118c2565b610749565b34801561022c57600080fd5b506101ca61023b3660046119c1565b61089a565b34801561024c57600080fd5b506101a861025b3660046119dd565b6108f2565b34801561026c57600080fd5b50610275610995565b6040516101d79190611d3c565b34801561028e57600080fd5b506102a261029d3660046119dd565b6109b9565b6040516101d79190611c21565b3480156102bb57600080fd5b506101a86102ca3660046119dd565b6109ec565b3480156102db57600080fd5b506101a86102ea366004611a75565b610a8f565b3480156102fb57600080fd5b506101a861030a366004611abf565b610b39565b34801561031b57600080fd5b506101a861032a3660046119c1565b610bc4565b34801561033b57600080fd5b5061034f61034a3660046117ad565b610c6a565b6040516101d7929190611d23565b34801561036957600080fd5b506101a8610378366004611791565b610f2d565b34801561038957600080fd5b5061039d610398366004611b04565b6110cb565b6040516101d79190611fb6565b7fffffffff0000000000000000000000000000000000000000000000000000000082166000908152600160205260409020548061041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e7d565b60405180910390fd5b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f2fdd9b4034d8eef4c469308919f66095e03b482447321a73e21479292fba6d378360405161046b9190611dfc565b60405180910390a28060005260206000f35b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604081205460ff16806104c157506104c1826110e8565b92915050565b7fffffffff000000000000000000000000000000000000000000000000000000008316600090815260036020908152604080832033845290915281205473ffffffffffffffffffffffffffffffffffffffff1680156106005773ffffffffffffffffffffffffffffffffffffffff811660021415610549576001915050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c81089061059f90889088908890600401611d69565b602060405180830381600087803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f191906119a1565b15610600576001915050610742565b7fffffffff000000000000000000000000000000000000000000000000000000008516600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff80855292529091205416801561073b5773ffffffffffffffffffffffffffffffffffffffff81166002141561068357600192505050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c8108906106d990899089908990600401611d69565b602060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b91906119a1565b1561073b57600192505050610742565b6000925050505b9392505050565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926107ac9284923392600091819084018382808284376000920191909152506104c792505050565b6107e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b60005b8251811015610895576107f66116ad565b83828151811061080257fe5b602002602001015190506000600281111561081957fe5b8151600281111561082657fe5b14156108435761083e8160200151826040015161113f565b61088c565b60018151600281111561085257fe5b141561086a5761083e8160200151826040015161114b565b60028151600281111561087957fe5b141561088c5761088c8160200151611233565b506001016107e5565b505050565b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360209081526040808320600180855292529091205473ffffffffffffffffffffffffffffffffffffffff161490565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926109559284923392600091819084018382808284376000920191909152506104c792505050565b61098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361114b565b7f586df6040000000000000000000000000000000000000000000000000000000081565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610a4f9284923392600091819084018382808284376000920191909152506104c792505050565b610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361113f565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610af29284923392600091819084018382808284376000920191909152506104c792505050565b610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b33848484611305565b50505050565b63a43e253360e01b610b8381336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b3384848461145a565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610c279284923392600091819084018382808284376000920191909152506104c792505050565b610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610c6682611233565b5050565b6000606063c2d85afc60e01b610cb881336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b61010086511115610d2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f48565b6060865167ffffffffffffffff81118015610d4557600080fd5b50604051908082528060200260200182016040528015610d7957816020015b6060815260200190600190039081610d645790505b5090506000805b8851811015610ecc57600060608a8381518110610d9957fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168b8481518110610dc757fe5b6020026020010151602001518c8581518110610ddf57fe5b602002602001015160400151604051610df89190611bdc565b60006040518083038185875af1925050503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b50915091508180610e565750610e568a8463ffffffff61146d16565b610e8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f11565b81610ea657610ea1848463ffffffff61147a16565b610ea8565b835b935080858481518110610eb757fe5b60209081029190910101525050600101610d80565b503373ffffffffffffffffffffffffffffffffffffffff167f589db18161c9dc190c7fc0cc0c319eeb589c1ba890be60089f1ee76b4bfb01ea89888486604051610f199493929190611c42565b60405180910390a297909650945050505050565b806002604051610f3c90611bf8565b90815260200160405180910390205460001415610f5c57610f5c81611487565b6040518060400160405280600681526020017f676f7665726e0000000000000000000000000000000000000000000000000000815250600281604051610fa29190611bdc565b908152602001604051809103902054600014610fea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b43600282604051610ffb9190611bdc565b908152604051908190036020019020556110357fc2d85afc000000000000000000000000000000000000000000000000000000008461113f565b61105f7fa43e2533000000000000000000000000000000000000000000000000000000008461113f565b6110887fc2d85afc000000000000000000000000000000000000000000000000000000006115a2565b806040516110969190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a2505050565b805160208183018101805160028252928201919093012091525481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806104c157505060014214919050565b610c6682826002611305565b6111548261089a565b1561118b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff000000000000000000000000000000000000000000000000000000008216600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055519092339290917f682f2c466c1e9f6883eb72cbced01373e1cb18b05ae5c8bc04dc73d73e29f8cd9190a45050565b61123c8161089a565b15611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff00000000000000000000000000000000000000000000000000000000811660008181526003602090815260408083206001808552925280832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155513392917f049c6b8b07a879425742523fa80f8ffb25e39ad518c93a5896a0df19518397e591a350565b61130e8361089a565b15611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b73ffffffffffffffffffffffffffffffffffffffff821660011415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f7f565b7fffffffff000000000000000000000000000000000000000000000000000000008316600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff878116808652919093529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e70919061144d908690611c21565b60405180910390a4505050565b611463836115a2565b6108958282611637565b60ff161c60019081161490565b600160ff919091161b1890565b6040518060400160405280600381526020017f61636c00000000000000000000000000000000000000000000000000000000008152506002816040516114cd9190611bdc565b908152602001604051809103902054600014611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b436002826040516115269190611bdc565b908152604051908190036020019020556115607f586df604000000000000000000000000000000000000000000000000000000008361113f565b8060405161156e9190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a25050565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9061162c908390611d3c565b60405180910390a150565b7fffffffff0000000000000000000000000000000000000000000000000000000082811660009081526001602052604090819020918316909155517f93d5961296b43c7ce4028f69e1b1469851106225a65d1a7f87fe48edf7f100d8906116a19084908490611dc9565b60405180910390a15050565b6040805160608101909152806000815260006020820181905260409091015290565b80356104c181612032565b80357fffffffff00000000000000000000000000000000000000000000000000000000811681146104c157600080fd5b600082601f83011261171a578081fd5b813567ffffffffffffffff811115611730578182fd5b61176160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611fbf565b915080825283602082850101111561177857600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156117a2578081fd5b813561074281612032565b6000806000606084860312156117c1578182fd5b67ffffffffffffffff80853511156117d7578283fd5b8435850186601f8201126117e9578384fd5b80356117fc6117f782611fe6565b611fbf565b818152602080820191908401875b848110156118a6578135860160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f0301121561184757898afd5b6118516060611fbf565b61185e8e602084016116cf565b81526040820135602082015260608201358981111561187b578b8cfd5b61188a8f60208386010161170a565b604083015250855250602093840193919091019060010161180a565b50909a60208a01359a5060409099013598975050505050505050565b600060208083850312156118d4578182fd5b823567ffffffffffffffff8111156118ea578283fd5b80840185601f8201126118fb578384fd5b8035915061190b6117f783611fe6565b828152838101908285016060808602850187018a1015611929578788fd5b8794505b858510156119935780828b031215611943578788fd5b61194c81611fbf565b823561195781612085565b81528288013561196681612057565b8189015260408381013561197981612032565b90820152845260019490940193928601929081019061192d565b509098975050505050505050565b6000602082840312156119b2578081fd5b81518015158114610742578182fd5b6000602082840312156119d2578081fd5b813561074281612057565b600080604083850312156119ef578182fd5b82356119fa81612057565b91506020830135611a0a81612032565b809150509250929050565b600080600060608486031215611a29578283fd5b8335611a3481612057565b92506020840135611a4481612032565b9150604084013567ffffffffffffffff811115611a5f578182fd5b611a6b8682870161170a565b9150509250925092565b600080600060608486031215611a89578283fd5b8335611a9481612057565b92506020840135611aa481612032565b91506040840135611ab481612032565b809150509250925092565b600080600060608486031215611ad3578283fd5b611add85856116da565b9250611aec85602086016116da565b9150611afb85604086016116da565b90509250925092565b600060208284031215611b15578081fd5b813567ffffffffffffffff811115611b2b578182fd5b611b378482850161170a565b949350505050565b6000815180845260208085018081965082840281019150828601855b85811015611b85578284038952611b73848351611b92565b98850198935090840190600101611b5b565b5091979650505050505050565b60008151808452611baa816020860160208601612006565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611bee818460208701612006565b9190910192915050565b7f61636c0000000000000000000000000000000000000000000000000000000000815260030190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000608082016080835280875180835260a0850191506020925060a0838202860101838a01855b83811015611ceb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608884030185528151606073ffffffffffffffffffffffffffffffffffffffff825116855287820151888601526040808301518282880152611cd583880182611b92565b988a019896505050928701925050600101611c69565b505088848701528760408701528581036060870152611d0a8188611b3f565b9a9950505050505050505050565b901515815260200190565b600083825260406020830152611b376040830184611b3f565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60007fffffffff000000000000000000000000000000000000000000000000000000008516825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152611dc06060830184611b92565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000092831681529116602082015260400190565b6000602082526107426020830184611b92565b60208082526009908201527f61636c3a20617574680000000000000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f61636c3a2066726f7a656e000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f616461702d6572633136353a20756e6b6e6f776e2063616c6c6261636b000000604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a60408201527f6564000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f676f7665726e3a2063616c6c0000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f676f7665726e3a20746f6f206d616e7900000000000000000000000000000000604082015260600190565b6020808252600f908201527f61636c3a2062616420667265657a650000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611fde57600080fd5b604052919050565b600067ffffffffffffffff821115611ffc578081fd5b5060209081020190565b60005b83811015612021578181015183820152602001612009565b83811115610b335750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461205457600080fd5b50565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461205457600080fd5b6003811061205457600080fdfea26469706673582212205a3e3f2f43011ec7816e701e191027dc3a09faf9e637985b08e15e047c43953e64736f6c634300060800337bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635001f3b51461003b578063ad921bf41461006c575b600080fd5b6100436100a5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100436004803603604081101561008257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356100c1565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008115610185576040805173ffffffffffffffffffffffffffffffffffffffff8086166024808401919091528351808403909101815260449092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc4d66de80000000000000000000000000000000000000000000000000000000017905260005461017e9261016392911690859063ffffffff6101d616565b73ffffffffffffffffffffffffffffffffffffffff16610370565b90506101d0565b826040516101929061059b565b73ffffffffffffffffffffffffffffffffffffffff909116815260405190819003602001906000f0801580156101cc573d6000803e3d6000fd5b5090505b92915050565b60006101e2848461038d565b9050600060608273ffffffffffffffffffffffffffffffffffffffff16846040518082805190602001908083835b6020831061024d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610210565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146102af576040519150601f19603f3d011682016040523d82523d6000602084013e6102b4565b606091505b5091509150816102c382610431565b90610366576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561032b578181015183820152602001610313565b50505050905090810190601f1680156103585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff81165b919050565b6000606061039a84610523565b9050826037602083016000f5915073ffffffffffffffffffffffffffffffffffffffff821661042a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f70726f78792d666163746f72793a206261642063726561746532000000000000604482015290519081900360640190fd5b5092915050565b60606044825110156104525750604080516020810190915260008152610388565b600482018051909260240190602081101561046c57600080fd5b810190808051604051939291908464010000000082111561048c57600080fd5b9083019060208201858111156104a157600080fd5b82516401000000008111828201881017156104bb57600080fd5b82525081516020918201929091019080838360005b838110156104e85781810151838201526020016104d0565b50505050905090810190601f1680156105155780820380516001836020036101000a031916815260200191505b506040525050509050919050565b604080516037808252606082810190935260208201818036833750507f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000060208301525060609290921b6034830152507f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000604882015290565b61267880620005aa8339019056fe60806040523480156200001157600080fd5b50604051620026783803806200267883398101604081905262000034916200044c565b308060026040516200004690620004b8565b90815260200160405180910390205460001415620000725762000072816001600160e01b036200009016565b50620000899050816001600160e01b036200016a16565b5062000580565b604051806040016040528060038152602001621858db60ea1b815250600281604051620000be91906200047c565b908152602001604051809103902054600014620000f85760405162461bcd60e51b8152600401620000ef9062000515565b60405180910390fd5b436002826040516200010b91906200047c565b908152604051908190036020019020556200013763161b7d8160e21b836001600160e01b03620002b316565b806040516200014791906200047c565b604051908190038120906000805160206200265883398151915290600090a25050565b8060026040516200017b90620004b8565b90815260200160405180910390205460001415620001a757620001a7816001600160e01b036200009016565b6040518060400160405280600681526020016533b7bb32b93760d11b815250600281604051620001d891906200047c565b908152602001604051809103902054600014620002095760405162461bcd60e51b8152600401620000ef9062000515565b436002826040516200021c91906200047c565b90815260405190819003602001902055620002486330b616bf60e21b846001600160e01b03620002b316565b6200026463a43e253360e01b846001600160e01b03620002b316565b6200027f6330b616bf60e21b6001600160e01b03620002ce16565b806040516200028f91906200047c565b604051908190038120906000805160206200265883398151915290600090a2505050565b620002ca828260026001600160e01b036200032f16565b5050565b6001600160e01b0319811660009081526020819052604090819020805460ff19166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9062000324908390620004c7565b60405180910390a150565b62000343836001600160e01b036200041916565b15620003635760405162461bcd60e51b8152600401620000ef90620004f0565b6001600160a01b03821660011415620003905760405162461bcd60e51b8152600401620000ef9062000557565b6001600160e01b0319831660008181526003602090815260408083206001600160a01b03878116808652919093529281902080546001600160a01b0319169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091906200040c908690620004dc565b60405180910390a4505050565b6001600160e01b031916600090815260036020908152604080832060018085529252909120546001600160a01b03161490565b6000602082840312156200045e578081fd5b81516001600160a01b038116811462000475578182fd5b9392505050565b60008251815b818110156200049e576020818601810151858301520162000482565b81811115620004ad5782828501525b509190910192915050565b621858db60ea1b815260030190565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b6020808252600b908201526a30b1b61d10333937bd32b760a91b604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a604082015261195960f21b606082015260800190565b6020808252600f908201526e61636c3a2062616420667265657a6560881b604082015260600190565b6120c880620005906000396000f3fe6080604052600436106100e15760003560e01c8063a157a10d1161007f578063bdf9a72611610059578063bdf9a7261461030f578063c2d85afc1461032f578063c4d66de81461035d578063cc1d4cab1461037d57610136565b8063a157a10d146102af578063a2157227146102cf578063a43e2533146102ef57610136565b8063495a9825116100bb578063495a98251461022057806358849734146102405780637e8c7f081461026057806396fc8abd1461028257610136565b806301ffc9a7146101aa578063097c8108146101e05780631c47671b1461020057610136565b36610136573373ffffffffffffffffffffffffffffffffffffffff167f6c703791f399558807424f489ccd811c72b4ff0b74af547264fad7c646776df03460405161012c9190611fb6565b60405180910390a2005b34801561014257600080fd5b506101a86000357fffffffff00000000000000000000000000000000000000000000000000000000166000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103aa92505050565b005b3480156101b657600080fd5b506101ca6101c53660046119c1565b61047d565b6040516101d79190611d18565b60405180910390f35b3480156101ec57600080fd5b506101ca6101fb366004611a15565b6104c7565b34801561020c57600080fd5b506101a861021b3660046118c2565b610749565b34801561022c57600080fd5b506101ca61023b3660046119c1565b61089a565b34801561024c57600080fd5b506101a861025b3660046119dd565b6108f2565b34801561026c57600080fd5b50610275610995565b6040516101d79190611d3c565b34801561028e57600080fd5b506102a261029d3660046119dd565b6109b9565b6040516101d79190611c21565b3480156102bb57600080fd5b506101a86102ca3660046119dd565b6109ec565b3480156102db57600080fd5b506101a86102ea366004611a75565b610a8f565b3480156102fb57600080fd5b506101a861030a366004611abf565b610b39565b34801561031b57600080fd5b506101a861032a3660046119c1565b610bc4565b34801561033b57600080fd5b5061034f61034a3660046117ad565b610c6a565b6040516101d7929190611d23565b34801561036957600080fd5b506101a8610378366004611791565b610f2d565b34801561038957600080fd5b5061039d610398366004611b04565b6110cb565b6040516101d79190611fb6565b7fffffffff0000000000000000000000000000000000000000000000000000000082166000908152600160205260409020548061041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e7d565b60405180910390fd5b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f2fdd9b4034d8eef4c469308919f66095e03b482447321a73e21479292fba6d378360405161046b9190611dfc565b60405180910390a28060005260206000f35b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604081205460ff16806104c157506104c1826110e8565b92915050565b7fffffffff000000000000000000000000000000000000000000000000000000008316600090815260036020908152604080832033845290915281205473ffffffffffffffffffffffffffffffffffffffff1680156106005773ffffffffffffffffffffffffffffffffffffffff811660021415610549576001915050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c81089061059f90889088908890600401611d69565b602060405180830381600087803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f191906119a1565b15610600576001915050610742565b7fffffffff000000000000000000000000000000000000000000000000000000008516600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff80855292529091205416801561073b5773ffffffffffffffffffffffffffffffffffffffff81166002141561068357600192505050610742565b6040517f097c810800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063097c8108906106d990899089908990600401611d69565b602060405180830381600087803b1580156106f357600080fd5b505af1158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072b91906119a1565b1561073b57600192505050610742565b6000925050505b9392505050565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926107ac9284923392600091819084018382808284376000920191909152506104c792505050565b6107e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b60005b8251811015610895576107f66116ad565b83828151811061080257fe5b602002602001015190506000600281111561081957fe5b8151600281111561082657fe5b14156108435761083e8160200151826040015161113f565b61088c565b60018151600281111561085257fe5b141561086a5761083e8160200151826040015161114b565b60028151600281111561087957fe5b141561088c5761088c8160200151611233565b506001016107e5565b505050565b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360209081526040808320600180855292529091205473ffffffffffffffffffffffffffffffffffffffff161490565b60408051602036601f81018290048202830182019093528282527f586df60400000000000000000000000000000000000000000000000000000000926109559284923392600091819084018382808284376000920191909152506104c792505050565b61098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361114b565b7f586df6040000000000000000000000000000000000000000000000000000000081565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610a4f9284923392600091819084018382808284376000920191909152506104c792505050565b610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610895838361113f565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610af29284923392600091819084018382808284376000920191909152506104c792505050565b610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b33848484611305565b50505050565b63a43e253360e01b610b8381336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610b3384848461145a565b60408051602036601f81018290048202830182019093528282527f586df6040000000000000000000000000000000000000000000000000000000092610c279284923392600091819084018382808284376000920191909152506104c792505050565b610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b610c6682611233565b5050565b6000606063c2d85afc60e01b610cb881336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c792505050565b610cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e0f565b61010086511115610d2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f48565b6060865167ffffffffffffffff81118015610d4557600080fd5b50604051908082528060200260200182016040528015610d7957816020015b6060815260200190600190039081610d645790505b5090506000805b8851811015610ecc57600060608a8381518110610d9957fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168b8481518110610dc757fe5b6020026020010151602001518c8581518110610ddf57fe5b602002602001015160400151604051610df89190611bdc565b60006040518083038185875af1925050503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b50915091508180610e565750610e568a8463ffffffff61146d16565b610e8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f11565b81610ea657610ea1848463ffffffff61147a16565b610ea8565b835b935080858481518110610eb757fe5b60209081029190910101525050600101610d80565b503373ffffffffffffffffffffffffffffffffffffffff167f589db18161c9dc190c7fc0cc0c319eeb589c1ba890be60089f1ee76b4bfb01ea89888486604051610f199493929190611c42565b60405180910390a297909650945050505050565b806002604051610f3c90611bf8565b90815260200160405180910390205460001415610f5c57610f5c81611487565b6040518060400160405280600681526020017f676f7665726e0000000000000000000000000000000000000000000000000000815250600281604051610fa29190611bdc565b908152602001604051809103902054600014610fea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b43600282604051610ffb9190611bdc565b908152604051908190036020019020556110357fc2d85afc000000000000000000000000000000000000000000000000000000008461113f565b61105f7fa43e2533000000000000000000000000000000000000000000000000000000008461113f565b6110887fc2d85afc000000000000000000000000000000000000000000000000000000006115a2565b806040516110969190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a2505050565b805160208183018101805160028252928201919093012091525481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806104c157505060014214919050565b610c6682826002611305565b6111548261089a565b1561118b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff000000000000000000000000000000000000000000000000000000008216600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055519092339290917f682f2c466c1e9f6883eb72cbced01373e1cb18b05ae5c8bc04dc73d73e29f8cd9190a45050565b61123c8161089a565b15611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b7fffffffff00000000000000000000000000000000000000000000000000000000811660008181526003602090815260408083206001808552925280832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016909217909155513392917f049c6b8b07a879425742523fa80f8ffb25e39ad518c93a5896a0df19518397e591a350565b61130e8361089a565b15611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611e46565b73ffffffffffffffffffffffffffffffffffffffff821660011415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611f7f565b7fffffffff000000000000000000000000000000000000000000000000000000008316600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff878116808652919093529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e70919061144d908690611c21565b60405180910390a4505050565b611463836115a2565b6108958282611637565b60ff161c60019081161490565b600160ff919091161b1890565b6040518060400160405280600381526020017f61636c00000000000000000000000000000000000000000000000000000000008152506002816040516114cd9190611bdc565b908152602001604051809103902054600014611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611eb4565b436002826040516115269190611bdc565b908152604051908190036020019020556115607f586df604000000000000000000000000000000000000000000000000000000008361113f565b8060405161156e9190611bdc565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a25050565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca9061162c908390611d3c565b60405180910390a150565b7fffffffff0000000000000000000000000000000000000000000000000000000082811660009081526001602052604090819020918316909155517f93d5961296b43c7ce4028f69e1b1469851106225a65d1a7f87fe48edf7f100d8906116a19084908490611dc9565b60405180910390a15050565b6040805160608101909152806000815260006020820181905260409091015290565b80356104c181612032565b80357fffffffff00000000000000000000000000000000000000000000000000000000811681146104c157600080fd5b600082601f83011261171a578081fd5b813567ffffffffffffffff811115611730578182fd5b61176160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611fbf565b915080825283602082850101111561177857600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156117a2578081fd5b813561074281612032565b6000806000606084860312156117c1578182fd5b67ffffffffffffffff80853511156117d7578283fd5b8435850186601f8201126117e9578384fd5b80356117fc6117f782611fe6565b611fbf565b818152602080820191908401875b848110156118a6578135860160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f0301121561184757898afd5b6118516060611fbf565b61185e8e602084016116cf565b81526040820135602082015260608201358981111561187b578b8cfd5b61188a8f60208386010161170a565b604083015250855250602093840193919091019060010161180a565b50909a60208a01359a5060409099013598975050505050505050565b600060208083850312156118d4578182fd5b823567ffffffffffffffff8111156118ea578283fd5b80840185601f8201126118fb578384fd5b8035915061190b6117f783611fe6565b828152838101908285016060808602850187018a1015611929578788fd5b8794505b858510156119935780828b031215611943578788fd5b61194c81611fbf565b823561195781612085565b81528288013561196681612057565b8189015260408381013561197981612032565b90820152845260019490940193928601929081019061192d565b509098975050505050505050565b6000602082840312156119b2578081fd5b81518015158114610742578182fd5b6000602082840312156119d2578081fd5b813561074281612057565b600080604083850312156119ef578182fd5b82356119fa81612057565b91506020830135611a0a81612032565b809150509250929050565b600080600060608486031215611a29578283fd5b8335611a3481612057565b92506020840135611a4481612032565b9150604084013567ffffffffffffffff811115611a5f578182fd5b611a6b8682870161170a565b9150509250925092565b600080600060608486031215611a89578283fd5b8335611a9481612057565b92506020840135611aa481612032565b91506040840135611ab481612032565b809150509250925092565b600080600060608486031215611ad3578283fd5b611add85856116da565b9250611aec85602086016116da565b9150611afb85604086016116da565b90509250925092565b600060208284031215611b15578081fd5b813567ffffffffffffffff811115611b2b578182fd5b611b378482850161170a565b949350505050565b6000815180845260208085018081965082840281019150828601855b85811015611b85578284038952611b73848351611b92565b98850198935090840190600101611b5b565b5091979650505050505050565b60008151808452611baa816020860160208601612006565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251611bee818460208701612006565b9190910192915050565b7f61636c0000000000000000000000000000000000000000000000000000000000815260030190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000608082016080835280875180835260a0850191506020925060a0838202860101838a01855b83811015611ceb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608884030185528151606073ffffffffffffffffffffffffffffffffffffffff825116855287820151888601526040808301518282880152611cd583880182611b92565b988a019896505050928701925050600101611c69565b505088848701528760408701528581036060870152611d0a8188611b3f565b9a9950505050505050505050565b901515815260200190565b600083825260406020830152611b376040830184611b3f565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60007fffffffff000000000000000000000000000000000000000000000000000000008516825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152611dc06060830184611b92565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000092831681529116602082015260400190565b6000602082526107426020830184611b92565b60208082526009908201527f61636c3a20617574680000000000000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f61636c3a2066726f7a656e000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f616461702d6572633136353a20756e6b6e6f776e2063616c6c6261636b000000604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a60408201527f6564000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f676f7665726e3a2063616c6c0000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f676f7665726e3a20746f6f206d616e7900000000000000000000000000000000604082015260600190565b6020808252600f908201527f61636c3a2062616420667265657a650000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611fde57600080fd5b604052919050565b600067ffffffffffffffff821115611ffc578081fd5b5060209081020190565b60005b83811015612021578181015183820152602001612009565b83811115610b335750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461205457600080fd5b50565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461205457600080fd5b6003811061205457600080fdfea26469706673582212205a3e3f2f43011ec7816e701e191027dc3a09faf9e637985b08e15e047c43953e64736f6c634300060800337bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2a264697066735822122098c9825139b60d8a48a8388b3aae94da3cc4e3a46f9b203772ef3cbdba6fef1964736f6c63430006080033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4544,
        "contract": "contracts/core-factories/GovernFactory.sol:GovernFactory",
        "label": "base",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}